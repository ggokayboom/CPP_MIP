!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AlphabetSet	src/VCD.py	/^AlphabetSet=['a','b','c','d','e','f','g','h','i','j','k','l','m', $/;"	v
AlphabetSet	src/real_simulation.py	/^AlphabetSet=['a','b','c','d','e','f','g','h','i','j','k','l','m', $/;"	v
AlphabetSet	src/simulation.py	/^AlphabetSet=['a','b','c','d','e','f','g','h','i','j','k','l','m', $/;"	v
DOWN	src/grid_based_sweep_coverage_path_planner.py	/^        DOWN = -1$/;"	v	class:SweepSearcher.SweepDirection
EXTEND_AREA	src/raycasting_grid_map.py	/^EXTEND_AREA = 15.0$/;"	v
GridMap	src/grid_map.py	/^class GridMap:$/;"	c
GridMap	src/grid_map_lib.py	/^class GridMap:$/;"	c
Kp	src/animation.py	/^Kp = 1.0  # speed propotional gain$/;"	v
Kp	src/backup_animation.py	/^Kp = 1.0  # speed propotional gain$/;"	v
Kp	src/main.py	/^Kp = 1.0  # speed propotional gain$/;"	v
Kp	src/pyo_main.py	/^Kp = 1.0  # speed propotional gain$/;"	v
Kp	src/real_simulation.py	/^Kp = 1.0  # speed propotional gain$/;"	v
Kp	src/simulation.py	/^Kp = 1.0  # speed propotional gain$/;"	v
Kv	src/animation.py	/^Kv = 0.05  # speed propotional gain$/;"	v
Kv	src/backup_animation.py	/^Kv = 0.05  # speed propotional gain$/;"	v
Kv	src/main.py	/^Kv = 0.15  # speed propotional gain$/;"	v
Kv	src/pyo_main.py	/^Kv = 0.15  # speed propotional gain$/;"	v
Kv	src/real_simulation.py	/^Kv = 0.15  # speed propotional gain$/;"	v
Kv	src/simulation.py	/^Kv = 0.15  # speed propotional gain$/;"	v
L	src/animation.py	/^L = 1.0  # [m] wheel base of vehicle$/;"	v
L	src/backup_animation.py	/^L = 1.0  # [m] wheel base of vehicle$/;"	v
L	src/main.py	/^L = 1.0  # [m] wheel base of vehicle$/;"	v
L	src/motion_model.py	/^L = 1.0  # wheel base$/;"	v
L	src/original_trj.py	/^L = 5$/;"	v
L	src/pyo_main.py	/^L = 1.0  # [m] wheel base of vehicle$/;"	v
L	src/real_simulation.py	/^L = 1.0  # [m] wheel base of vehicle$/;"	v
L	src/simulation.py	/^L = 1.0  # [m] wheel base of vehicle$/;"	v
LEFT	src/grid_based_sweep_coverage_path_planner.py	/^        LEFT = -1$/;"	v	class:SweepSearcher.MovingDirection
Lfc	src/animation.py	/^Lfc = 1.0  # look-ahead distance$/;"	v
Lfc	src/backup_animation.py	/^Lfc = 1.0  # look-ahead distance$/;"	v
Lfc	src/main.py	/^Lfc = 1.0  # look-ahead distance$/;"	v
Lfc	src/pyo_main.py	/^Lfc = 1.0  # look-ahead distance$/;"	v
Lfc	src/real_simulation.py	/^Lfc = 1.0  # look-ahead distance$/;"	v
Lfc	src/simulation.py	/^Lfc = 1.0  # look-ahead distance$/;"	v
M	src/main.py	/^        M = 75              # number of constraints in order to approximate the force and velocity magnitudes$/;"	v
M	src/pyo_main.py	/^        M = 75              # number of constraints in order to approximate the force and velocity magnitudes$/;"	v
M	src/test.py	/^        M = 75              # number of constraints in order to approximate the force and velocity magnitudes$/;"	v
M	src/test.py	/^        M = 75          # number of constraints in order to approximate the force and velocity magnitudes$/;"	v
MovingDirection	src/grid_based_sweep_coverage_path_planner.py	/^    class MovingDirection(IntEnum):$/;"	c	class:SweepSearcher
Obstacle	src/obstacle.py	/^class Obstacle:$/;"	c
Params	src/animation.py	/^class Params:$/;"	c
Params	src/backup_animation.py	/^class Params:$/;"	c
Params	src/main.py	/^class Params:$/;"	c
Params	src/pyo_main.py	/^class Params:$/;"	c
Params	src/real_simulation.py	/^class Params:$/;"	c
Params	src/simulation.py	/^class Params:$/;"	c
RIGHT	src/grid_based_sweep_coverage_path_planner.py	/^        RIGHT = 1$/;"	v	class:SweepSearcher.MovingDirection
Region_Boundary	src/real_simulation.py	/^Region_Boundary =12.5$/;"	v
Region_Boundary	src/simulation.py	/^Region_Boundary =12.5$/;"	v
Roadmap	src/utils/configuration_space.py	/^class Roadmap:$/;"	c
Search	src/utils/uniform_cost_search.py	/^class Search:$/;"	c
Spline	src/cubic_spline_planner.py	/^class Spline:$/;"	c
Spline2D	src/cubic_spline_planner.py	/^class Spline2D:$/;"	c
State	src/motion_model.py	/^class State:$/;"	c
State	src/utils/priority_queue.py	/^class State:$/;"	c
SweepDirection	src/grid_based_sweep_coverage_path_planner.py	/^    class SweepDirection(IntEnum):$/;"	c	class:SweepSearcher
SweepSearcher	src/grid_based_sweep_coverage_path_planner.py	/^class SweepSearcher:$/;"	c
T	src/main.py	/^        T = 152             # maximum time of travel$/;"	v
T	src/pyo_main.py	/^        T = 152             # maximum time of travel$/;"	v
T	src/test.py	/^        T = 100             # maximum time of travel$/;"	v
T	src/test.py	/^        T = 100         # maximum time of travel$/;"	v
TestStringMethods	tests/test_vehicle.py	/^class TestStringMethods(unittest.TestCase):$/;"	c
UAV	src/uav.py	/^class UAV:$/;"	c
UP	src/grid_based_sweep_coverage_path_planner.py	/^        UP = 1$/;"	v	class:SweepSearcher.SweepDirection
Update_a	src/animation.py	/^def Update_a(state, goal):$/;"	f
Update_a	src/backup_animation.py	/^def Update_a(state, goal):$/;"	f
Update_a	src/main.py	/^def Update_a(state, goal):$/;"	f
Update_a	src/pyo_main.py	/^def Update_a(state, goal):$/;"	f
Update_a	src/real_simulation.py	/^def Update_a(state, goal):$/;"	f
Update_a	src/simulation.py	/^def Update_a(state, goal):$/;"	f
Update_phi	src/animation.py	/^def Update_phi(state, goal):$/;"	f
Update_phi	src/backup_animation.py	/^def Update_phi(state, goal):$/;"	f
Update_phi	src/main.py	/^def Update_phi(state, goal):$/;"	f
Update_phi	src/pyo_main.py	/^def Update_phi(state, goal):$/;"	f
Update_phi	src/real_simulation.py	/^def Update_phi(state, goal):$/;"	f
Update_phi	src/simulation.py	/^def Update_phi(state, goal):$/;"	f
Vehicle	src/vehicle.py	/^class Vehicle:$/;"	c
VerticalCellDecomposition	src/VCD.py	/^class VerticalCellDecomposition:$/;"	c
Z	src/main.py	/^                Z = str(vehicles[i].kset[k][j])$/;"	v
Z	src/pyo_main.py	/^                Z = str(vehicles[i].kset[k][j])$/;"	v
Z	src/test.py	/^                Z = str(vehicles[i].kset[k][j])$/;"	v
__calc_A	src/cubic_spline_planner.py	/^    def __calc_A(self, h):$/;"	m	class:Spline	file:
__calc_B	src/cubic_spline_planner.py	/^    def __calc_B(self, h):$/;"	m	class:Spline	file:
__calc_s	src/cubic_spline_planner.py	/^    def __calc_s(self, x, y):$/;"	m	class:Spline2D	file:
__init__	src/VCD.py	/^    def __init__(self,cspace, goalpose=None):$/;"	m	class:VerticalCellDecomposition
__init__	src/animation.py	/^    def __init__(self):$/;"	m	class:Params
__init__	src/animation.py	/^    def __init__(self):$/;"	m	class:map_params
__init__	src/backup_animation.py	/^    def __init__(self):$/;"	m	class:Params
__init__	src/backup_animation.py	/^    def __init__(self):$/;"	m	class:map_params
__init__	src/cubic_spline_planner.py	/^    def __init__(self, x, y):$/;"	m	class:Spline
__init__	src/cubic_spline_planner.py	/^    def __init__(self, x, y):$/;"	m	class:Spline2D
__init__	src/grid_based_sweep_coverage_path_planner.py	/^    def __init__(self, mdirection, sdirection, xinds_goaly, goaly):$/;"	m	class:SweepSearcher
__init__	src/grid_map.py	/^    def __init__(self, polygon_vertices, point_inside_polygon=[0,0]):$/;"	m	class:GridMap
__init__	src/grid_map_lib.py	/^    def __init__(self, width, height, resolution,$/;"	m	class:GridMap
__init__	src/main.py	/^    def __init__(self):$/;"	m	class:Params
__init__	src/main.py	/^    def __init__(self):$/;"	m	class:map_params
__init__	src/motion_model.py	/^    def __init__(self, x=0.0, y=0.0, yaw=0.0, v=0.0):$/;"	m	class:State
__init__	src/obstacle.py	/^    def __init__(self,x_min,x_max,y_min,y_max,wall=None):$/;"	m	class:Obstacle
__init__	src/pyo_main.py	/^    def __init__(self):$/;"	m	class:Params
__init__	src/pyo_main.py	/^    def __init__(self):$/;"	m	class:map_params
__init__	src/raycasting_grid_map.py	/^    def __init__(self):$/;"	m	class:precastDB
__init__	src/real_simulation.py	/^    def __init__(self):$/;"	m	class:Params
__init__	src/real_simulation.py	/^    def __init__(self):$/;"	m	class:map_params
__init__	src/simulation.py	/^    def __init__(self):$/;"	m	class:Params
__init__	src/simulation.py	/^    def __init__(self):$/;"	m	class:map_params
__init__	src/uav.py	/^    def __init__(self, mass: float, dt: float, T: float, x0: float, y0: float, th0: float, v0: float, id: int, model, M, v_max, a_max, area_size, x_fin: float, y_fin: float, wp: bool, x_wp=None, y_wp=None):$/;"	m	class:UAV
__init__	src/utils/configuration_space.py	/^    def __init__(self):$/;"	m	class:Roadmap
__init__	src/utils/configuration_space.py	/^    def __init__(self,FILE_NAME=None):$/;"	m	class:configuration_space
__init__	src/utils/priority_queue.py	/^  def __init__(self):$/;"	m	class:priority_queue
__init__	src/utils/priority_queue.py	/^  def __init__(self,x,y,cost,idx):$/;"	m	class:State
__init__	src/utils/uniform_cost_search.py	/^    def __init__(self,roadmap):$/;"	m	class:Search
__init__	src/vehicle.py	/^    def __init__(self, mass: float, dt: float, T: float, x0: float, y0: float, id: int, model, M, v_max, f_max, area_size, x_fin: float, y_fin: float, wp: bool, x_wp=None, y_wp=None):$/;"	m	class:Vehicle
__search_index	src/cubic_spline_planner.py	/^    def __search_index(self, x):$/;"	m	class:Spline	file:
__str__	src/raycasting_grid_map.py	/^    def __str__(self):$/;"	m	class:precastDB	file:
a	src/original_trj.py	/^a = np.array([m.a[t]() for t in m.t])$/;"	v
add_obstacles_to_grid_map	src/grid_map.py	/^    def add_obstacles_to_grid_map(self, obstacles):$/;"	m	class:GridMap
approximate_cos	src/uav.py	/^    def approximate_cos(slef, x):$/;"	m	class:UAV
approximate_sin	src/uav.py	/^    def approximate_sin(slef, x):$/;"	m	class:UAV
ar_max	src/original_trj.py	/^ar_max = 2.8$/;"	v
area_size	src/animation.py	/^area_size=5$/;"	v
area_size	src/backup_animation.py	/^area_size=5$/;"	v
area_size	src/dataplot.py	/^area_size=13$/;"	v
area_size	src/main.py	/^        area_size = 12      # window size$/;"	v
area_size	src/original_trj.py	/^area_size=12$/;"	v
area_size	src/pyo_main.py	/^        area_size = 12      # window size$/;"	v
area_size	src/real_simulation.py	/^    area_size=13$/;"	v
area_size	src/simulation.py	/^    area_size=13$/;"	v
area_size	src/test.py	/^        area_size = 10      # window size$/;"	v
area_size	src/test.py	/^        area_size = 10  # window size$/;"	v
args	src/main.py	/^    args = vars(parser.parse_args())$/;"	v
args	src/pyo_main.py	/^    args = vars(parser.parse_args())$/;"	v
args	src/real_simulation.py	/^    args = vars(parser.parse_args())$/;"	v
args	src/simulation.py	/^    args = vars(parser.parse_args())$/;"	v
args	src/test.py	/^    args = parser.parse_args()$/;"	v
array	src/utils/priority_queue.py	/^  array = [42,23,16,15,4,8]$/;"	v
atan_zero_to_twopi	src/raycasting_grid_map.py	/^def atan_zero_to_twopi(y, x):$/;"	f
av	src/original_trj.py	/^av = np.array([m.a[t]() for t in m.t])$/;"	v
av_max	src/original_trj.py	/^av_max = 2.8$/;"	v
average	src/VCD.py	/^    def average(self,lst):$/;"	m	class:VerticalCellDecomposition
ax	src/dataplot.py	/^ax = plt.axes()$/;"	v
ax	src/original_trj.py	/^ax = plt.gca()$/;"	v
best_trj	src/real_simulation.py	/^            best_trj = calc_IG_trjs(trjs_candidate, entropymap , params_localmap, params_globalmap)$/;"	v
biased_terminal_state_sampling_test1	src/state_lattice_planner.py	/^def biased_terminal_state_sampling_test1():$/;"	f
biased_terminal_state_sampling_test2	src/state_lattice_planner.py	/^def biased_terminal_state_sampling_test2():$/;"	f
bresenham	src/grid_map.py	/^def bresenham(start, end):$/;"	f
calc	src/cubic_spline_planner.py	/^    def calc(self, t):$/;"	m	class:Spline
calc_IG_trjs	src/real_simulation.py	/^def calc_IG_trjs(trj_candidates, emap, params_local, params_global, horizon=20):$/;"	f
calc_IG_trjs	src/simulation.py	/^def calc_IG_trjs(trj_candidates, emap, params_local, params_global, horizon=15):$/;"	f
calc_J	src/model_predictive_trajectory_generator.py	/^def calc_J(target, p, h, k0):$/;"	f
calc_biased_polar_states	src/state_lattice_planner.py	/^def calc_biased_polar_states(goal_angle, ns, nxy, nh, d, a_min, a_max, p_min, p_max):$/;"	f
calc_curvature	src/cubic_spline_planner.py	/^    def calc_curvature(self, s):$/;"	m	class:Spline2D
calc_diff	src/model_predictive_trajectory_generator.py	/^def calc_diff(target, x, y, yaw):$/;"	f
calc_grid_central_xy_position_from_index	src/grid_map_lib.py	/^    def calc_grid_central_xy_position_from_index(self, index, lower_pos):$/;"	m	class:GridMap
calc_grid_central_xy_position_from_xy_index	src/grid_map_lib.py	/^    def calc_grid_central_xy_position_from_xy_index(self, x_ind, y_ind):$/;"	m	class:GridMap
calc_grid_index_from_xy_index	src/grid_map_lib.py	/^    def calc_grid_index_from_xy_index(self, x_ind, y_ind):$/;"	m	class:GridMap
calc_grid_map_config	src/raycasting_grid_map.py	/^def calc_grid_map_config(xyreso, agent_x,agent_y, sensor_range):$/;"	f
calc_lane_states	src/state_lattice_planner.py	/^def calc_lane_states(l_center, l_heading, l_width, v_width, d, nxy):$/;"	f
calc_lane_states_linear	src/state_lattice_planner.py	/^def calc_lane_states_linear(l_center, l_heading, l_width, v_width, d, nxy):$/;"	f
calc_position	src/cubic_spline_planner.py	/^    def calc_position(self, s):$/;"	m	class:Spline2D
calc_spline_course	src/cubic_spline_planner.py	/^def calc_spline_course(x, y, ds=0.1):$/;"	f
calc_states_list	src/lookuptable_generator.py	/^def calc_states_list():$/;"	f
calc_uniform_polar_states	src/state_lattice_planner.py	/^def calc_uniform_polar_states(cur_states,nxy, nh, d, a_min, a_max, p_min, p_max):$/;"	f
calc_xy_index_from_position	src/grid_map_lib.py	/^    def calc_xy_index_from_position(self, pos, lower_pos, max_index):$/;"	m	class:GridMap
calc_yaw	src/cubic_spline_planner.py	/^    def calc_yaw(self, s):$/;"	m	class:Spline2D
calcd	src/cubic_spline_planner.py	/^    def calcd(self, t):$/;"	m	class:Spline
calcdd	src/cubic_spline_planner.py	/^    def calcdd(self, t):$/;"	m	class:Spline
check_inside_polygon	src/grid_map_lib.py	/^    def check_inside_polygon(iox, ioy, x, y):$/;"	m	class:GridMap
check_occupied_from_xy_index	src/grid_map_lib.py	/^    def check_occupied_from_xy_index(self, xind, yind, occupied_val=1.0):$/;"	m	class:GridMap
check_polygon_between_regions	src/VCD.py	/^    def check_polygon_between_regions(self,region1,region2):$/;"	m	class:VerticalCellDecomposition
check_polygon_visible	src/raycasting_grid_map.py	/^def check_polygon_visible(min_angle,max_angle,fov_anglelist):$/;"	f
cm	src/simulation.py	/^            cm =plt.get_cmap('gist_rainbow')$/;"	v
col	src/simulation.py	/^                col = cm(1.*i\/num_colors)$/;"	v
configuration_space	src/utils/configuration_space.py	/^class configuration_space:$/;"	c
constrain_dynamics	src/uav.py	/^    def constrain_dynamics(self, v_init):$/;"	m	class:UAV
constrain_dynamics	src/vehicle.py	/^    def constrain_dynamics(self, vx_init, vy_init):$/;"	m	class:Vehicle
constrain_multiple_vehicles	src/main.py	/^        constrain_multiple_vehicles = False   # True: add contraints related to multiple vehicle, False: do not add$/;"	v
constrain_multiple_vehicles	src/pyo_main.py	/^        constrain_multiple_vehicles = False   # True: add contraints related to multiple vehicle, False: do not add$/;"	v
constrain_multiple_vehicles	src/test.py	/^        constrain_multiple_vehicles = False   # True: add contraints related to multiple vehicle, False: do not add$/;"	v
constrain_multiple_vehicles	src/uav.py	/^    def constrain_multiple_vehicles(self, vehicles, d_veh):$/;"	m	class:UAV
constrain_multiple_vehicles	src/vehicle.py	/^    def constrain_multiple_vehicles(self, vehicles, d_veh):$/;"	m	class:Vehicle
constrain_obstacles	src/main.py	/^        constrain_obstacles = True           # True: add contraints related to avoiding obstacles, False: do not add$/;"	v
constrain_obstacles	src/pyo_main.py	/^        constrain_obstacles = True           # True: add contraints related to avoiding obstacles, False: do not add$/;"	v
constrain_obstacles	src/test.py	/^        constrain_obstacles = False            # True: add contraints related to avoiding obstacles, False: do not add$/;"	v
constrain_obstacles	src/test.py	/^        constrain_obstacles = True            # True: add contraints related to avoiding obstacles, False: do not add$/;"	v
constrain_obstacles	src/uav.py	/^    def constrain_obstacles(self, obstacles, d_obs):$/;"	m	class:UAV
constrain_obstacles	src/vehicle.py	/^    def constrain_obstacles(self, obstacles, d_obs):$/;"	m	class:Vehicle
constrain_positions	src/uav.py	/^    def constrain_positions(self):$/;"	m	class:UAV
constrain_positions	src/vehicle.py	/^    def constrain_positions(self):$/;"	m	class:Vehicle
constrain_waypoints	src/main.py	/^        constrain_waypoints = True            # True: add contraints related to waypoints, False: do not add$/;"	v
constrain_waypoints	src/pyo_main.py	/^        constrain_waypoints = True            # True: add contraints related to waypoints, False: do not add$/;"	v
constrain_waypoints	src/test.py	/^        constrain_waypoints = True            # True: add contraints related to waypoints, False: do not add$/;"	v
constrain_waypoints	src/uav.py	/^    def constrain_waypoints(self):$/;"	m	class:UAV
constrain_waypoints	src/vehicle.py	/^    def constrain_waypoints(self):$/;"	m	class:Vehicle
construct_decomposition_lines	src/VCD.py	/^    def construct_decomposition_lines(self,vertex,verticalLine,pointList,top):$/;"	m	class:VerticalCellDecomposition
construct_graph	src/VCD.py	/^    def construct_graph(self):$/;"	m	class:VerticalCellDecomposition
construct_graph_main	src/VCD.py	/^    def construct_graph_main(self):$/;"	m	class:VerticalCellDecomposition
convert_global_coordinate	src/grid_based_sweep_coverage_path_planner.py	/^def convert_global_coordinate(x, y, sweep_vec, sweep_start_posi):$/;"	f
convert_grid_coordinate	src/grid_based_sweep_coverage_path_planner.py	/^def convert_grid_coordinate(ox, oy, sweep_vec, sweep_start_posi):$/;"	f
coords	src/main.py	/^        coords = np.zeros([z,2])$/;"	v
coords	src/pyo_main.py	/^        coords = np.zeros([z,2])$/;"	v
coords	src/test.py	/^        coords = np.zeros([z,2])$/;"	v
cost_th	src/model_predictive_trajectory_generator.py	/^cost_th = 0.2$/;"	v
create_borders_grid_map	src/grid_map.py	/^    def create_borders_grid_map(self, polygon_center):$/;"	m	class:GridMap
cspace	src/main.py	/^    cspace = configuration_space(args['in'])$/;"	v
cspace	src/pyo_main.py	/^    cspace = configuration_space(args['in'])$/;"	v
cspace	src/real_simulation.py	/^    cspace=configuration_space()$/;"	v
cspace	src/simulation.py	/^    cspace=configuration_space()$/;"	v
cspace	src/utils/configuration_space.py	/^	cspace = configuration_space("input.txt")$/;"	v
d_obs	src/main.py	/^        d_obs = 1.0         # minimum distance required from obstacle$/;"	v
d_obs	src/pyo_main.py	/^        d_obs = 1.0         # minimum distance required from obstacle$/;"	v
d_obs	src/test.py	/^        d_obs = 0.1         # minimum distance required from obstacle$/;"	v
d_obs	src/test.py	/^        d_obs = 0.25     # minimum distance required from obstacle$/;"	v
data	src/main.py	/^        data= np.append(coords,v_data,1)$/;"	v
data	src/main.py	/^        data= np.append(data,f_data,1)$/;"	v
data	src/pyo_main.py	/^        data= np.append(coords,v_data,1)$/;"	v
data	src/pyo_main.py	/^        data= np.append(data,f_data,1)$/;"	v
data	src/test.py	/^        data= np.append(coords,v_data,1)$/;"	v
data	src/test.py	/^        data= np.append(data,f_data,1)$/;"	v
datafolder	src/main.py	/^    datafolder = 'results\/data\/'       # folder name$/;"	v
datafolder	src/pyo_main.py	/^    datafolder = 'results\/data\/'       # folder name$/;"	v
datafolder	src/test.py	/^    datafolder = 'results\/data\/'       # folder name$/;"	v
define_flight_area	src/test.py	/^def define_flight_area(initial_pose):$/;"	f
define_polygon	src/tools.py	/^def define_polygon(num_pts=4, ax=None):$/;"	f
det	src/utils/graph_utils.py	/^    def det(a, b):$/;"	f	function:line_intersection
df	src/animation.py	/^df = pd.read_csv(file_name, delimiter=',', names = ['index', 'x', 'y', 'vx', 'vy', 'fx', 'fy'])$/;"	v
df	src/backup_animation.py	/^df = pd.read_csv(file_name, delimiter=',', names = ['index', 'x', 'y', 'vx', 'vy', 'fx', 'fy'])$/;"	v
df	src/dataplot.py	/^df = pd.read_csv(file_name, delimiter=',', names = ['index', 'x', 'y', 'vx', 'vy', 'fx', 'fy'])$/;"	v
df	src/main.py	/^        df = pd.read_csv(file_name, delimiter=',', names = ['index', 'x', 'y', 'vx', 'vy', 'fx', 'fy'])$/;"	v
df	src/pyo_main.py	/^        df = pd.read_csv(file_name, delimiter=',', names = ['index', 'x', 'y', 'vx', 'vy', 'fx', 'fy'])$/;"	v
df	src/simulation.py	/^        df = pd.read_csv(file_name, delimiter=',', names = ['index', 'x', 'y', 'vx', 'vy', 'fx', 'fy'])$/;"	v
dir_path	src/animation.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	src/animation.py	/^dir_path=dir_path[:-4]$/;"	v
dir_path	src/backup_animation.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	src/backup_animation.py	/^dir_path=dir_path[:-4]$/;"	v
dir_path	src/dataplot.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	src/dataplot.py	/^dir_path=dir_path[:-4]$/;"	v
dir_path	src/main.py	/^        dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	src/main.py	/^        dir_path=dir_path[:-4]$/;"	v
dir_path	src/pyo_main.py	/^        dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	src/pyo_main.py	/^        dir_path=dir_path[:-4]$/;"	v
dir_path	src/simulation.py	/^        dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	src/simulation.py	/^        dir_path=dir_path[:-4]$/;"	v
displayHeap	src/utils/priority_queue.py	/^  def displayHeap(self):$/;"	m	class:priority_queue
distance	src/utils/graph_utils.py	/^def distance(pt1,pt2):$/;"	f
draw	src/obstacle.py	/^    def draw(self,axes=None):$/;"	m	class:Obstacle
draw_car	src/original_trj.py	/^def draw_car(x=0, y=0, yaw=0, phi=0,axes=None):$/;"	f
draw_entropymap_global	src/real_simulation.py	/^def draw_entropymap_global(data,parmas_globalmap, ax):$/;"	f
draw_entropymap_global	src/simulation.py	/^def draw_entropymap_global(data,parmas_globalmap, ax):$/;"	f
draw_heatmap	src/raycasting_grid_map.py	/^def draw_heatmap(data, minx, maxx, miny, maxy, xyreso):$/;"	f
draw_map	src/grid_map.py	/^    def draw_map(self, obstacles,ax=None):$/;"	m	class:GridMap
draw_occmap	src/animation.py	/^def draw_occmap(data, params_map,agent_x, agent_y, ax):$/;"	f
draw_occmap	src/backup_animation.py	/^def draw_occmap(data, minx, maxx, miny, maxy, xyreso,agent_x, agent_y, ax):$/;"	f
draw_occmap	src/main.py	/^def draw_occmap(data, params_map,agent_x, agent_y, ax):$/;"	f
draw_occmap	src/pyo_main.py	/^def draw_occmap(data, params_map,agent_x, agent_y, ax):$/;"	f
draw_occmap	src/real_simulation.py	/^def draw_occmap(data, params_map,params_global, agent_x, agent_y, ax):$/;"	f
draw_occmap	src/simulation.py	/^def draw_occmap(data, params_map,agent_x, agent_y, ax):$/;"	f
draw_occmap_global	src/animation.py	/^def draw_occmap_global(data,parmas_globalmap, ax):$/;"	f
draw_occmap_global	src/backup_animation.py	/^def draw_occmap_global(data, minx, maxx, miny, maxy, xyreso, ax):$/;"	f
draw_occmap_global	src/main.py	/^def draw_occmap_global(data,parmas_globalmap, ax):$/;"	f
draw_occmap_global	src/pyo_main.py	/^def draw_occmap_global(data,parmas_globalmap, ax):$/;"	f
draw_occmap_global	src/real_simulation.py	/^def draw_occmap_global(data,parmas_globalmap, ax):$/;"	f
draw_occmap_global	src/simulation.py	/^def draw_occmap_global(data,parmas_globalmap, ax):$/;"	f
ds	src/motion_model.py	/^ds = 0.2  # course distanse$/;"	v
ds	src/simulation.py	/^                ds = 0.2                    # [m] distance of each intepolated points$/;"	v
dt	src/animation.py	/^dt = 0.2  # [s]$/;"	v
dt	src/backup_animation.py	/^dt = 0.2  # [s]$/;"	v
dt	src/main.py	/^        dt = 4.             # time step size$/;"	v
dt	src/main.py	/^dt = 0.2  # [s]$/;"	v
dt	src/pyo_main.py	/^        dt = 4.             # time step size$/;"	v
dt	src/pyo_main.py	/^dt = 0.2  # [s]$/;"	v
dt	src/real_simulation.py	/^dt = 0.2  # [s]$/;"	v
dt	src/simulation.py	/^dt = 0.2  # [s]$/;"	v
dt	src/test.py	/^        dt = 4          # time step size$/;"	v
dt	src/test.py	/^        dt = 4.             # time step size$/;"	v
dx	src/backup_animation.py	/^    dx = goal[0] - state[0]$/;"	v
dy	src/backup_animation.py	/^    dy = goal[1] - state[1]$/;"	v
elementInHeap	src/utils/priority_queue.py	/^  def elementInHeap(self,x,y):$/;"	m	class:priority_queue
entropy	src/animation.py	/^        entropy = get_map_entropy(pmap_global, params_globalmap)$/;"	v
entropy	src/real_simulation.py	/^            entropy = get_map_entropy(pmap_global, params_globalmap)$/;"	v
entropy	src/simulation.py	/^            entropy = get_map_entropy(pmap_global, params_globalmap)$/;"	v
entropymap	src/real_simulation.py	/^            entropymap = get_global_entropymap(pmap_global,params_globalmap)$/;"	v
entropymap	src/simulation.py	/^            entropymap = get_global_entropymap(pmap_global,params_globalmap)$/;"	v
epsilon	src/main.py	/^    epsilon = 0.1                          # effect of the force on the objective function$/;"	v
epsilon	src/pyo_main.py	/^    epsilon = 0.1                          # effect of the force on the objective function$/;"	v
epsilon	src/test.py	/^    epsilon = 0.5                          # effect of the force on the objective function$/;"	v
expand_grid	src/grid_map_lib.py	/^    def expand_grid(self):$/;"	m	class:GridMap
extra	src/main.py	/^        extra = ''$/;"	v
extra	src/main.py	/^        extra = 'acc_'$/;"	v
extra	src/pyo_main.py	/^        extra = ''$/;"	v
extra	src/pyo_main.py	/^        extra = 'acc_'$/;"	v
extra	src/test.py	/^        extra = ''$/;"	v
extra	src/test.py	/^        extra = 'acc_'$/;"	v
f_coords	src/main.py	/^            f_coords = []$/;"	v
f_coords	src/main.py	/^        f_coords = []$/;"	v
f_coords	src/pyo_main.py	/^            f_coords = []$/;"	v
f_coords	src/pyo_main.py	/^        f_coords = []$/;"	v
f_coords	src/test.py	/^            f_coords = []$/;"	v
f_coords	src/test.py	/^        f_coords = []$/;"	v
f_coords_x	src/main.py	/^            f_coords_x = []$/;"	v
f_coords_x	src/main.py	/^        f_coords_x = []$/;"	v
f_coords_x	src/pyo_main.py	/^            f_coords_x = []$/;"	v
f_coords_x	src/pyo_main.py	/^        f_coords_x = []$/;"	v
f_coords_x	src/test.py	/^            f_coords_x = []$/;"	v
f_coords_x	src/test.py	/^        f_coords_x = []$/;"	v
f_coords_y	src/main.py	/^            f_coords_y = []$/;"	v
f_coords_y	src/main.py	/^        f_coords_y = []$/;"	v
f_coords_y	src/pyo_main.py	/^            f_coords_y = []$/;"	v
f_coords_y	src/pyo_main.py	/^        f_coords_y = []$/;"	v
f_coords_y	src/test.py	/^            f_coords_y = []$/;"	v
f_coords_y	src/test.py	/^        f_coords_y = []$/;"	v
f_data	src/main.py	/^        f_data=np.zeros([z,2])$/;"	v
f_data	src/pyo_main.py	/^        f_data=np.zeros([z,2])$/;"	v
f_data	src/test.py	/^        f_data=np.zeros([z,2])$/;"	v
f_mag	src/dataplot.py	/^f_mag = []$/;"	v
f_max	src/animation.py	/^f_max=0.3$/;"	v
f_max	src/backup_animation.py	/^f_max=0.3$/;"	v
f_max	src/dataplot.py	/^f_max=0.35$/;"	v
f_max	src/main.py	/^    f_max = [1.0]           # maximum force experienced by a vehicle$/;"	v
f_max	src/pyo_main.py	/^    f_max = [1.0]           # maximum force experienced by a vehicle$/;"	v
f_max	src/real_simulation.py	/^f_max=0.3$/;"	v
f_max	src/simulation.py	/^f_max=0.3$/;"	v
f_max	src/test.py	/^        f_max = [0.25]      # maximum force experienced by a vehicle$/;"	v
f_max	src/test.py	/^        f_max = [0.35]    # maximum force experienced by a vehicle$/;"	v
fig	src/dataplot.py	/^fig = plt.subplot(2,1,1)$/;"	v
fig	src/main.py	/^        fig = plt.subplot(2,1,1)$/;"	v
fig	src/pyo_main.py	/^        fig = plt.subplot(2,1,1)$/;"	v
fig	src/test.py	/^        fig = plt.subplot(2,1,1)$/;"	v
fig2	src/dataplot.py	/^fig2 = plt.subplot(2, 1, 2)$/;"	v
fig2	src/main.py	/^        fig2 = plt.subplot(2, 1, 2)$/;"	v
fig2	src/pyo_main.py	/^        fig2 = plt.subplot(2, 1, 2)$/;"	v
fig2	src/test.py	/^        fig2 = plt.subplot(2, 1, 2)$/;"	v
file_name	src/animation.py	/^file_name =dir_path + "\/results\/data\/robot_" +timeindex+"_.csv"$/;"	v
file_name	src/backup_animation.py	/^file_name =dir_path + "\/results\/data\/robot_" +timeindex+"_.csv"$/;"	v
file_name	src/dataplot.py	/^file_name =dir_path + "\/results\/data\/robot_" +timeindex+"_.csv"$/;"	v
file_name	src/main.py	/^        file_name =dir_path + "\/results\/data\/robot_" +timeindex+"_.csv"$/;"	v
file_name	src/pyo_main.py	/^        file_name =dir_path + "\/results\/data\/robot_" +timeindex+"_.csv"$/;"	v
file_name	src/simulation.py	/^        file_name =dir_path + "\/results\/data\/robot_" +timeindex+"_.csv"$/;"	v
filename_data	src/main.py	/^    filename_data= 'robot_'$/;"	v
filename_data	src/main.py	/^    filename_data= datafolder+filename_data+timestamp+'.csv'$/;"	v
filename_data	src/pyo_main.py	/^    filename_data= 'robot_'$/;"	v
filename_data	src/pyo_main.py	/^    filename_data= datafolder+filename_data+timestamp+'.csv'$/;"	v
filename_data	src/test.py	/^    filename_data= 'robot_'$/;"	v
filename_data	src/test.py	/^    filename_data= datafolder+filename_data+timestamp+'.csv'$/;"	v
filename_obstacle	src/main.py	/^    filename_obstacle =datafolder+filename_obstacle+timestamp+'.csv'$/;"	v
filename_obstacle	src/main.py	/^    filename_obstacle= 'obstacles_'$/;"	v
filename_obstacle	src/pyo_main.py	/^    filename_obstacle =datafolder+filename_obstacle+timestamp+'.csv'$/;"	v
filename_obstacle	src/pyo_main.py	/^    filename_obstacle= 'obstacles_'$/;"	v
filename_obstacle	src/test.py	/^    filename_obstacle =datafolder+filename_obstacle+timestamp+'.csv'$/;"	v
filename_obstacle	src/test.py	/^    filename_obstacle= 'obstacles_'$/;"	v
filename_waypoint	src/main.py	/^    filename_waypoint = 'waypoints_'$/;"	v
filename_waypoint	src/main.py	/^    filename_waypoint =datafolder+filename_waypoint+timestamp+'.csv'$/;"	v
filename_waypoint	src/pyo_main.py	/^    filename_waypoint = 'waypoints_'$/;"	v
filename_waypoint	src/pyo_main.py	/^    filename_waypoint =datafolder+filename_waypoint+timestamp+'.csv'$/;"	v
filename_waypoint	src/test.py	/^    filename_waypoint = 'waypoints_'$/;"	v
filename_waypoint	src/test.py	/^    filename_waypoint =datafolder+filename_waypoint+timestamp+'.csv'$/;"	v
find_region_line	src/VCD.py	/^    def find_region_line(self, line_type, i, vertex, current_vertex):$/;"	m	class:VerticalCellDecomposition
find_safe_turning_grid	src/grid_based_sweep_coverage_path_planner.py	/^    def find_safe_turning_grid(self, cxind, cyind, gmap):$/;"	m	class:SweepSearcher
find_sweep_direction_and_start_posi	src/grid_based_sweep_coverage_path_planner.py	/^def find_sweep_direction_and_start_posi(ox, oy):$/;"	f
flight_area_vertices	src/test.py	/^    flight_area_vertices = define_flight_area(initial_pose)$/;"	v
floatregex	src/animation.py	/^floatregex =re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+') $/;"	v
floatregex	src/backup_animation.py	/^floatregex =re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+') $/;"	v
floatregex	src/dataplot.py	/^floatregex =re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+') $/;"	v
floatregex	src/main.py	/^        floatregex =re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+') $/;"	v
floatregex	src/pyo_main.py	/^        floatregex =re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+') $/;"	v
floatregex	src/simulation.py	/^        floatregex =re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+') $/;"	v
flood_fill	src/grid_map.py	/^def flood_fill(cpoint, pmap):$/;"	f
folder	src/main.py	/^        folder = 'results\/waypoints_obs\/'        # folder name$/;"	v
folder	src/pyo_main.py	/^        folder = 'results\/waypoints_obs\/'        # folder name$/;"	v
folder	src/test.py	/^        folder = 'results\/waypoints\/'       # folder name$/;"	v
folder	src/test.py	/^        folder = 'results\/waypoints_obs\/'        # folder name$/;"	v
force_x	src/animation.py	/^force_x = force_x.astype(np.float)$/;"	v
force_x	src/animation.py	/^force_x = np.asarray(df['fx'][1:])             #robot pos_x$/;"	v
force_x	src/backup_animation.py	/^force_x = force_x.astype(np.float)$/;"	v
force_x	src/backup_animation.py	/^force_x = np.asarray(df['fx'][1:])             #robot pos_x$/;"	v
force_x	src/dataplot.py	/^force_x = force_x.astype(np.float)$/;"	v
force_x	src/dataplot.py	/^force_x = np.asarray(df['fx'][1:])             #robot pos_x$/;"	v
force_y	src/animation.py	/^force_y = force_y.astype(np.float)$/;"	v
force_y	src/animation.py	/^force_y = np.asarray(df['fy'][1:])             #robot pos_y$/;"	v
force_y	src/backup_animation.py	/^force_y = force_y.astype(np.float)$/;"	v
force_y	src/backup_animation.py	/^force_y = np.asarray(df['fy'][1:])             #robot pos_y$/;"	v
force_y	src/dataplot.py	/^force_y = force_y.astype(np.float)$/;"	v
force_y	src/dataplot.py	/^force_y = np.asarray(df['fy'][1:])             #robot pos_y$/;"	v
generate_fov_angle	src/raycasting_grid_map.py	/^def generate_fov_angle(agent_yaw, fov_range):$/;"	f
generate_last_state	src/motion_model.py	/^def generate_last_state(s, km, kf, k0):$/;"	f
generate_lookup_table	src/lookuptable_generator.py	/^def generate_lookup_table():$/;"	f
generate_path	src/state_lattice_planner.py	/^def generate_path(cur_states, target_states, k0):$/;"	f
generate_ray_casting_grid_map	src/raycasting_grid_map.py	/^def generate_ray_casting_grid_map(obstacles,walls, params, agent_x=0.0, agent_y=0.0,  agent_yaw=0.0):$/;"	f
generate_samples	src/obstacle.py	/^    def generate_samples(self, reso=0.2):$/;"	m	class:Obstacle
generate_trajectory	src/motion_model.py	/^def generate_trajectory(cur_states, s, km, kf, k0):$/;"	f
generate_vertices	src/obstacle.py	/^    def generate_vertices(self):$/;"	m	class:Obstacle
generate_waypoint	src/VCD.py	/^    def generate_waypoint(self, params_local):$/;"	m	class:VerticalCellDecomposition
generating_globaltrjs	src/real_simulation.py	/^def generating_globaltrjs(cur_state, cspace, obstacles,goals, params_global):$/;"	f
generating_globaltrjs	src/simulation.py	/^def generating_globaltrjs(cur_state, cspace, obstacles,goals, params_global):$/;"	f
get_area_polygon	src/VCD.py	/^    def get_area_polygon(self, region):$/;"	m	class:VerticalCellDecomposition
get_entropy_infov	src/real_simulation.py	/^def get_entropy_infov(state,entropy_map,params_local,params_global):$/;"	f
get_entropy_infov	src/simulation.py	/^def get_entropy_infov(state,entropy_map,params_local,params_global):$/;"	f
get_final_path	src/utils/uniform_cost_search.py	/^    def get_final_path(self):$/;"	m	class:Search
get_global_entropymap	src/real_simulation.py	/^def get_global_entropymap(pmap_global,params_map):$/;"	f
get_global_entropymap	src/simulation.py	/^def get_global_entropymap(pmap_global,params_map):$/;"	f
get_local_entropymap	src/real_simulation.py	/^def get_local_entropymap(pmap_local,params_map):$/;"	f
get_local_entropymap	src/simulation.py	/^def get_local_entropymap(pmap_local,params_map):$/;"	f
get_lookup_table	src/state_lattice_planner.py	/^def get_lookup_table():$/;"	f
get_map_entropy	src/animation.py	/^def get_map_entropy(pmap_global,params_map):$/;"	f
get_map_entropy	src/main.py	/^def get_map_entropy(pmap_global,params_map):$/;"	f
get_map_entropy	src/pyo_main.py	/^def get_map_entropy(pmap_global,params_map):$/;"	f
get_map_entropy	src/real_simulation.py	/^def get_map_entropy(pmap_global,params_map):$/;"	f
get_map_entropy	src/simulation.py	/^def get_map_entropy(pmap_global,params_map):$/;"	f
get_obs	src/utils/configuration_space.py	/^    def get_obs(self):$/;"	m	class:configuration_space
get_preocc	src/backup_animation.py	/^def get_preocc(previous_map, grid,map_params):$/;"	f
get_raycast_to_line	src/raycasting_grid_map.py	/^def get_raycast_to_line(origin,obstacle, obs_points,yawreso):$/;"	f
get_value_from_xy_index	src/grid_map_lib.py	/^    def get_value_from_xy_index(self, x_ind, y_ind):$/;"	m	class:GridMap
get_vcd_vertices	src/VCD.py	/^    def get_vcd_vertices(self):$/;"	m	class:VerticalCellDecomposition
get_visible_vertices	src/obstacle.py	/^    def get_visible_vertices(self, agent_x, agent_y):$/;"	m	class:Obstacle
get_visible_vertices_wall	src/obstacle.py	/^    def get_visible_vertices_wall(self, agent_x, agent_y,params):$/;"	m	class:Obstacle
get_xy_index_from_xy_pos	src/grid_map_lib.py	/^    def get_xy_index_from_xy_pos(self, x_pos, y_pos):$/;"	m	class:GridMap
goal	src/animation.py	/^        goal = [way_x[goali], way_y[goali]]$/;"	v
goal	src/animation.py	/^goal = [way_x[goali], way_y[goali]]$/;"	v
goal	src/backup_animation.py	/^        goal = [way_x[goali], way_y[goali]]$/;"	v
goal	src/backup_animation.py	/^goal = [way_x[goali], way_y[goali]]$/;"	v
goal	src/real_simulation.py	/^                goal = [best_trj[0][-1], best_trj[1][-1]]$/;"	v
goal	src/real_simulation.py	/^                goal = [best_trj[0][horizon-1], best_trj[1][horizon-1]]$/;"	v
goal	src/real_simulation.py	/^    goal =goal_pos                        #define goal from goal_pos(initial direction)$/;"	v
goal	src/simulation.py	/^            goal = [way_x[goali], way_y[goali]]$/;"	v
goal	src/simulation.py	/^    goal = [way_x[goali], way_y[goali]]$/;"	v
goal	src/simulation.py	/^    goal=[7,6]$/;"	v
goal_dist	src/animation.py	/^    goal_dist = sqrt((goal[0] - state[0])**2+(goal[1] - state[1])**2) #distance to gaol$/;"	v
goal_dist	src/backup_animation.py	/^    goal_dist = sqrt(dx**2+dy**2)$/;"	v
goal_dist	src/real_simulation.py	/^        goal_dist = distance(goal,state)                                    #distance to gaol$/;"	v
goal_dist	src/simulation.py	/^        goal_dist = sqrt((goal[0] - state[0])**2+(goal[1] - state[1])**2) #distance to gaol$/;"	v
goal_pos	src/main.py	/^    goal_pos=cspace.goal_state $/;"	v
goal_pos	src/pyo_main.py	/^    goal_pos=cspace.goal_state $/;"	v
goal_pos	src/real_simulation.py	/^    goal_pos=[5.2, -1.5]$/;"	v
goal_pos	src/simulation.py	/^    goal_pos=[-5, 9]$/;"	v
goal_sampling_VCD	src/real_simulation.py	/^def goal_sampling_VCD(waypoints, agent_x, agent_y, params_global):$/;"	f
goal_tol	src/animation.py	/^goal_tol=0.2$/;"	v
goal_tol	src/backup_animation.py	/^goal_tol=0.2$/;"	v
goal_tol	src/real_simulation.py	/^    goal_tol=0.2$/;"	v
goal_tol	src/simulation.py	/^    goal_tol=0.2$/;"	v
goali	src/animation.py	/^goali = 0                           #define goal from waypoints set$/;"	v
goali	src/backup_animation.py	/^goali = 0                           #define goal from waypoints set$/;"	v
goali	src/simulation.py	/^    goali = 0                           #define goal from waypoints set$/;"	v
grid2meters	src/grid_map.py	/^    def grid2meters(self, pose_grid):$/;"	m	class:GridMap
gridmap	src/test.py	/^    gridmap = GridMap(flight_area_vertices, initial_pose)$/;"	v
gridobstacles	src/test.py	/^    gridobstacles = [$/;"	v
gtrjs	src/real_simulation.py	/^            gtrjs= generating_globaltrjs(state, cspace,obstacles,sample_goals,params_globalmap)$/;"	v
gtrjs	src/simulation.py	/^            gtrjs= generating_globaltrjs(state, cspace,obstacles,sample_goals,params_globalmap)$/;"	v
h	src/model_predictive_trajectory_generator.py	/^h = np.matrix([0.2, 0.02, 0.02]).T  # parameter sampling distanse$/;"	v
horizon	src/real_simulation.py	/^horizon=20$/;"	v
init_pos	src/main.py	/^    init_pos=cspace.start_state $/;"	v
init_pos	src/pyo_main.py	/^    init_pos=cspace.start_state $/;"	v
init_pos	src/real_simulation.py	/^    init_pos=[3.0,4.0]$/;"	v
init_pos	src/simulation.py	/^    init_pos=[-1.5, 8]$/;"	v
initial_entropy	src/animation.py	/^initial_entropy = get_map_entropy(pmap_global,params_globalmap)$/;"	v
initial_entropy	src/real_simulation.py	/^    initial_entropy = get_map_entropy(pmap_global,params_globalmap)$/;"	v
initial_entropy	src/simulation.py	/^    initial_entropy = get_map_entropy(pmap_global,params_globalmap)$/;"	v
initial_pose	src/test.py	/^    initial_pose=[]$/;"	v
initialize_global_occ_grid_map	src/animation.py	/^def initialize_global_occ_grid_map(params_map):$/;"	f
initialize_global_occ_grid_map	src/backup_animation.py	/^def initialize_global_occ_grid_map(params_map):$/;"	f
initialize_global_occ_grid_map	src/main.py	/^def initialize_global_occ_grid_map(params_map):$/;"	f
initialize_global_occ_grid_map	src/pyo_main.py	/^def initialize_global_occ_grid_map(params_map):$/;"	f
initialize_global_occ_grid_map	src/real_simulation.py	/^def initialize_global_occ_grid_map(params_map):$/;"	f
initialize_global_occ_grid_map	src/simulation.py	/^def initialize_global_occ_grid_map(params_map):$/;"	f
insert	src/utils/priority_queue.py	/^  def insert(self,x,y,cost,idx):$/;"	m	class:priority_queue
inside_polygon	src/utils/graph_utils.py	/^def inside_polygon(x,y,polygon):$/;"	f
isEmpty	src/utils/priority_queue.py	/^  def isEmpty(self):$/;"	m	class:priority_queue
is_search_done	src/grid_based_sweep_coverage_path_planner.py	/^    def is_search_done(self, gmap):$/;"	m	class:SweepSearcher
iter	src/animation.py	/^    iter=iter+1$/;"	v
iter	src/animation.py	/^iter=0$/;"	v
iter	src/backup_animation.py	/^    iter=iter+1$/;"	v
iter	src/backup_animation.py	/^iter=0$/;"	v
iter	src/real_simulation.py	/^        iter=iter+1$/;"	v
iter	src/real_simulation.py	/^    iter=0$/;"	v
iter	src/simulation.py	/^        iter=iter+1$/;"	v
iter	src/simulation.py	/^    iter=0$/;"	v
iters	src/main.py	/^        iters=0$/;"	v
iters	src/pyo_main.py	/^        iters=0$/;"	v
iters	src/test.py	/^        iters=0$/;"	v
k	src/animation.py	/^k = 0.1  # look forward gain$/;"	v
k	src/backup_animation.py	/^k = 0.1  # look forward gain$/;"	v
k	src/main.py	/^k = 0.1  # look forward gain$/;"	v
k	src/pyo_main.py	/^k = 0.1  # look forward gain$/;"	v
k	src/real_simulation.py	/^k = 0.1  # look forward gain$/;"	v
k	src/simulation.py	/^k = 0.1  # look forward gain$/;"	v
ktheta	src/animation.py	/^ktheta = 0.5$/;"	v
ktheta	src/backup_animation.py	/^ktheta = 0.5$/;"	v
ktheta	src/main.py	/^ktheta = 0.5$/;"	v
ktheta	src/pyo_main.py	/^ktheta = 0.5$/;"	v
ktheta	src/real_simulation.py	/^ktheta = 0.5$/;"	v
ktheta	src/simulation.py	/^ktheta = 0.5$/;"	v
l_free	src/animation.py	/^l_free=np.log(0.2\/0.8)$/;"	v
l_free	src/main.py	/^l_free=np.log(0.2\/0.8)$/;"	v
l_free	src/pyo_main.py	/^l_free=np.log(0.2\/0.8)$/;"	v
l_free	src/raycasting_grid_map.py	/^l_free = np.log(0.3\/0.7)$/;"	v
l_free	src/real_simulation.py	/^l_free=np.log(0.15\/0.85)$/;"	v
l_free	src/simulation.py	/^l_free=np.log(0.15\/0.85)$/;"	v
l_occ	src/animation.py	/^l_occ=np.log(0.8\/0.2)$/;"	v
l_occ	src/main.py	/^l_occ=np.log(0.8\/0.2)$/;"	v
l_occ	src/pyo_main.py	/^l_occ=np.log(0.8\/0.2)$/;"	v
l_occ	src/raycasting_grid_map.py	/^l_occ = np.log(0.7\/0.3)$/;"	v
l_occ	src/real_simulation.py	/^l_occ=np.log(0.85\/0.15)$/;"	v
l_occ	src/simulation.py	/^l_occ=np.log(0.85\/0.15)$/;"	v
labels	src/main.py	/^        labels = ['Turn rate 15 $\\degree$\/s', 'Turn rate 12 $\\degree$\/s']$/;"	v
labels	src/pyo_main.py	/^        labels = ['Turn rate 15 $\\degree$\/s', 'Turn rate 12 $\\degree$\/s']$/;"	v
labels	src/test.py	/^            labels = ['Turn rate 15 $\\degree$\/s', 'Turn rate 12 $\\degree$\/s']$/;"	v
lane_state_sampling_test1	src/state_lattice_planner.py	/^def lane_state_sampling_test1(cur_states, params_global, ax=None):$/;"	f
leftChild	src/utils/priority_queue.py	/^  def leftChild(self,parent):$/;"	m	class:priority_queue
line_intersection	src/utils/graph_utils.py	/^def line_intersection(line1, line2):$/;"	f
line_styles	src/main.py	/^        line_styles = ["--", ":", "-.", '-', '-']$/;"	v
line_styles	src/pyo_main.py	/^        line_styles = ["--", ":", "-.", '-', '-']$/;"	v
line_styles	src/test.py	/^        line_styles = ["--", ":", "-.", '-', '-']$/;"	v
local_trjs	src/real_simulation.py	/^            local_trjs = lane_state_sampling_test1(state,params_globalmap, axes[1,0])$/;"	v
local_trjs	src/simulation.py	/^            local_trjs = lane_state_sampling_test1(state,axes[1,0])$/;"	v
m	src/main.py	/^    m = Model("ppl")$/;"	v
m	src/original_trj.py	/^m = ConcreteModel()$/;"	v
m	src/pyo_main.py	/^    m = Model("ppl")$/;"	v
m	src/test.py	/^    m = Model("ppl")$/;"	v
main	src/cubic_spline_planner.py	/^def main():$/;"	f
main	src/lookuptable_generator.py	/^def main():$/;"	f
main	src/model_predictive_trajectory_generator.py	/^def main():$/;"	f
main	src/raycasting_grid_map.py	/^def main():$/;"	f
main	src/state_lattice_planner.py	/^def main():$/;"	f
map_params	src/animation.py	/^class map_params:$/;"	c
map_params	src/backup_animation.py	/^class map_params:$/;"	c
map_params	src/main.py	/^class map_params:$/;"	c
map_params	src/pyo_main.py	/^class map_params:$/;"	c
map_params	src/real_simulation.py	/^class map_params:$/;"	c
map_params	src/simulation.py	/^class map_params:$/;"	c
marker_styles	src/main.py	/^        marker_styles = ['None', 'None', 'None', 'x', 'None']$/;"	v
marker_styles	src/pyo_main.py	/^        marker_styles = ['None', 'None', 'None', 'x', 'None']$/;"	v
marker_styles	src/test.py	/^        marker_styles = ['None', 'None', 'None', 'x', 'None']$/;"	v
max_iter	src/model_predictive_trajectory_generator.py	/^max_iter = 60$/;"	v
meters2grid	src/grid_map.py	/^    def meters2grid(self, pose_m,):$/;"	m	class:GridMap
minKey	src/utils/priority_queue.py	/^  def minKey(self):$/;"	m	class:priority_queue
minheapify_ins	src/utils/priority_queue.py	/^  def minheapify_ins(self,index):$/;"	m	class:priority_queue
minheapify_pop	src/utils/priority_queue.py	/^  def minheapify_pop(self,index):$/;"	m	class:priority_queue
motion	src/backup_animation.py	/^def motion(state, goal, params):$/;"	f
motion	src/main.py	/^def motion(state, goal, params):$/;"	f
motion	src/pyo_main.py	/^def motion(state, goal, params):$/;"	f
motion	src/real_simulation.py	/^def motion(state, goal, params):$/;"	f
motion	src/simulation.py	/^def motion(state, goal, params):$/;"	f
move_target_grid	src/grid_based_sweep_coverage_path_planner.py	/^    def move_target_grid(self, cxind, cyind, gmap):$/;"	m	class:SweepSearcher
n_steps	src/main.py	/^            n_steps = len(v_coords)$/;"	v
n_steps	src/pyo_main.py	/^            n_steps = len(v_coords)$/;"	v
n_steps	src/test.py	/^            n_steps = len(v_coords)$/;"	v
n_way_points	src/main.py	/^    n_way_points = len(wp_vcds)$/;"	v
n_way_points	src/pyo_main.py	/^    n_way_points = len(wp_vcds)$/;"	v
n_way_points	src/test.py	/^    n_way_points = len(wp_coords[0])$/;"	v
name	src/main.py	/^        name = 'waypoints_obs.png'        # name of the figure to be saved$/;"	v
name	src/main.py	/^    name=name+timestamp +".png"$/;"	v
name	src/pyo_main.py	/^        name = 'waypoints_obs.png'        # name of the figure to be saved$/;"	v
name	src/pyo_main.py	/^    name=name+timestamp +".png"$/;"	v
name	src/test.py	/^        name = 'waypoints'              # name of the figure to be saved$/;"	v
name	src/test.py	/^        name = 'waypoints_obs.png'        # name of the figure to be saved$/;"	v
name	src/test.py	/^    name=name+timestamp +".png"$/;"	v
ntimestep	src/animation.py	/^ntimestep = len(pos_x)$/;"	v
ntimestep	src/backup_animation.py	/^ntimestep = len(pos_x)$/;"	v
ntimestep	src/simulation.py	/^    ntimestep = len(pos_x)$/;"	v
num_colors	src/simulation.py	/^            num_colors = len(gtrjs)$/;"	v
num_vehicles	src/main.py	/^        num_vehicles = len(veh_coords)$/;"	v
num_vehicles	src/pyo_main.py	/^        num_vehicles = len(veh_coords)$/;"	v
num_vehicles	src/test.py	/^    num_vehicles = len(veh_coords)$/;"	v
nums	src/animation.py	/^        nums = [float(k) for k in floatregex.findall(obstacle_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/animation.py	/^    nums = [float(k) for k in regex.findall(way_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/backup_animation.py	/^        nums = [float(k) for k in floatregex.findall(obstacle_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/backup_animation.py	/^    nums = [float(k) for k in regex.findall(way_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/dataplot.py	/^    nums = [float(k) for k in floatregex.findall(obstacle_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/dataplot.py	/^    nums = [float(k) for k in regex.findall(way_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/main.py	/^            nums = [float(k) for k in floatregex.findall(obstacle_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/main.py	/^            nums = [float(k) for k in regex.findall(way_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/pyo_main.py	/^            nums = [float(k) for k in floatregex.findall(obstacle_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/pyo_main.py	/^            nums = [float(k) for k in regex.findall(way_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/simulation.py	/^            nums = [float(k) for k in floatregex.findall(obstacle_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
nums	src/simulation.py	/^            nums = [float(k) for k in regex.findall(way_coords[i])] #find integer value in string format '[ int, int ]'$/;"	v
obj_acceleration	src/main.py	/^    obj_acceleration = False   # when True the acceleration is taken into consideration in the objective function$/;"	v
obj_acceleration	src/pyo_main.py	/^    obj_acceleration = False   # when True the acceleration is taken into consideration in the objective function$/;"	v
obj_acceleration	src/test.py	/^    obj_acceleration = True    # when True the acceleration is taken into consideration in the objective function$/;"	v
obs	src/animation.py	/^        obs = Obstacle(nums[0]-1, nums[1]-1, nums[2], nums[3])          #xmin,ymin, $/;"	v
obs	src/backup_animation.py	/^        obs = Obstacle(nums[0]-1, nums[1]-1, nums[2], nums[3])          #xmin,ymin, $/;"	v
obs	src/main.py	/^            obs = Obstacle(nums[0]-1, nums[1]-1, nums[2], nums[3])          #xmin,ymin, $/;"	v
obs	src/pyo_main.py	/^            obs = Obstacle(nums[0]-1, nums[1]-1, nums[2], nums[3])          #xmin,ymin, $/;"	v
obs	src/simulation.py	/^            obs = Obstacle(nums[0]-1, nums[1]-1, nums[2], nums[3])          #xmin,ymin, $/;"	v
obs	src/simulation.py	/^    obs = Obstacle(-Region_Boundary, -Region_Boundary, -Region_Boundary, Region_Boundary,True)          $/;"	v
obs	src/simulation.py	/^    obs = Obstacle(-Region_Boundary, Region_Boundary, -Region_Boundary, -Region_Boundary,True)         $/;"	v
obs	src/simulation.py	/^    obs = Obstacle(-Region_Boundary, Region_Boundary, Region_Boundary, Region_Boundary,True)          $/;"	v
obs	src/simulation.py	/^    obs = Obstacle(Region_Boundary, Region_Boundary, -Region_Boundary, Region_Boundary,True)          $/;"	v
obs_column	src/main.py	/^        obs_column=[]$/;"	v
obs_column	src/pyo_main.py	/^        obs_column=[]$/;"	v
obs_column	src/test.py	/^        obs_column=[]$/;"	v
obs_coords	src/main.py	/^        obs_coords = cspace.get_obs()$/;"	v
obs_coords	src/main.py	/^    obs_coords = [[5, 7, -2, 1], [-1.0, 1.0, 0.0, 2.0]]     # array containing all obstacles in [x_min,x_max,y_min,y_max] format$/;"	v
obs_coords	src/pyo_main.py	/^        obs_coords = cspace.get_obs()$/;"	v
obs_coords	src/pyo_main.py	/^    obs_coords = [[5, 7, -2, 1], [-1.0, 1.0, 0.0, 2.0]]     # array containing all obstacles in [x_min,x_max,y_min,y_max] format$/;"	v
obs_coords	src/test.py	/^        obs_coords = [[-0.5, 0.5, 0, 2.5], [-3.5, -2, -1, 2]]     # array containing all obstacles in [x_min,x_max,y_min,y_max] format$/;"	v
obs_coords	src/test.py	/^        obs_coords = [[-0.5, 0.5, 0, 5]]     # array containing all obstacles in [x_min,x_max,y_min,y_max] format$/;"	v
obs_str	src/main.py	/^            obs_str = '['+str(obs.x_min)+','+str(obs.x_max)+','+str(obs.y_min)+','+str(obs.y_max)+']'$/;"	v
obs_str	src/pyo_main.py	/^            obs_str = '['+str(obs.x_min)+','+str(obs.x_max)+','+str(obs.y_min)+','+str(obs.y_max)+']'$/;"	v
obs_str	src/test.py	/^            obs_str = '['+str(obs.x_min)+','+str(obs.x_max)+','+str(obs.y_min)+','+str(obs.y_max)+']'$/;"	v
obsdf	src/animation.py	/^obsdf = pd.read_csv(obsfile_name , delimiter=',', names = ['obstacle'])$/;"	v
obsdf	src/backup_animation.py	/^obsdf = pd.read_csv(obsfile_name , delimiter=',', names = ['obstacle'])$/;"	v
obsdf	src/dataplot.py	/^obsdf = pd.read_csv(obsfile_name , delimiter=',', names = ['obstacle'])$/;"	v
obsdf	src/main.py	/^        obsdf = pd.read_csv(obsfile_name , delimiter=',', names = ['obstacle'])$/;"	v
obsdf	src/pyo_main.py	/^        obsdf = pd.read_csv(obsfile_name , delimiter=',', names = ['obstacle'])$/;"	v
obsdf	src/simulation.py	/^        obsdf = pd.read_csv(obsfile_name , delimiter=',', names = ['obstacle'])$/;"	v
obsfile_name	src/animation.py	/^obsfile_name =dir_path + "\/results\/data\/obstacles_"+timeindex+"_.csv"$/;"	v
obsfile_name	src/backup_animation.py	/^obsfile_name =dir_path + "\/results\/data\/obstacles_"+timeindex+"_.csv"$/;"	v
obsfile_name	src/dataplot.py	/^obsfile_name =dir_path + "\/results\/data\/obstacles_"+timeindex+"_.csv"$/;"	v
obsfile_name	src/main.py	/^        obsfile_name =dir_path + "\/results\/data\/obstacles2_"+timeindex+"_.csv"$/;"	v
obsfile_name	src/pyo_main.py	/^        obsfile_name =dir_path + "\/results\/data\/obstacles2_"+timeindex+"_.csv"$/;"	v
obsfile_name	src/simulation.py	/^        obsfile_name =dir_path + "\/results\/data\/obstacles2_"+timeindex+"_.csv"$/;"	v
obstacle_coords	src/animation.py	/^obstacle_coords = np.asarray(obsdf['obstacle'][0:])$/;"	v
obstacle_coords	src/backup_animation.py	/^obstacle_coords = np.asarray(obsdf['obstacle'][0:])$/;"	v
obstacle_coords	src/dataplot.py	/^obstacle_coords = np.asarray(obsdf['obstacle'][0:])$/;"	v
obstacle_coords	src/main.py	/^        obstacle_coords = np.asarray(obsdf['obstacle'][0:])$/;"	v
obstacle_coords	src/pyo_main.py	/^        obstacle_coords = np.asarray(obsdf['obstacle'][0:])$/;"	v
obstacle_coords	src/simulation.py	/^        obstacle_coords = np.asarray(obsdf['obstacle'][0:])$/;"	v
obstacles	src/animation.py	/^obstacles = []                                  # list which will contain all obstacles$/;"	v
obstacles	src/backup_animation.py	/^obstacles = []                                  # list which will contain all obstacles$/;"	v
obstacles	src/dataplot.py	/^obstacles = []                                  # list which will contain all obstacles$/;"	v
obstacles	src/main.py	/^        obstacles = []                                  # list which will contain all obstacles$/;"	v
obstacles	src/main.py	/^        obstacles=[]$/;"	v
obstacles	src/pyo_main.py	/^        obstacles = []                                  # list which will contain all obstacles$/;"	v
obstacles	src/pyo_main.py	/^        obstacles=[]$/;"	v
obstacles	src/simulation.py	/^        obstacles = []                                  # list which will contain all obstacles$/;"	v
obstacles	src/test.py	/^    obstacles = []                                  # list which will contain all obstacles$/;"	v
on_polygon	src/utils/graph_utils.py	/^def on_polygon(x,y,polygon):$/;"	f
optimize_trajectory	src/model_predictive_trajectory_generator.py	/^def optimize_trajectory(cur_states, target, k0, p):$/;"	f
ox	src/test.py	/^    ox = flight_area_vertices[:,0].tolist() + [flight_area_vertices[0,0]]$/;"	v
oy	src/test.py	/^    oy = flight_area_vertices[:,1].tolist() + [flight_area_vertices[0,1]]$/;"	v
p_free_given_zfree	src/backup_animation.py	/^p_free_given_zfree= 0.99$/;"	v
p_free_given_zocc	src/backup_animation.py	/^p_free_given_zocc=0.05$/;"	v
p_occ_given_zfree	src/backup_animation.py	/^p_occ_given_zfree= 0.01$/;"	v
p_occ_given_zocc	src/backup_animation.py	/^p_occ_given_zocc=0.95$/;"	v
params	src/animation.py	/^params = Params()$/;"	v
params	src/backup_animation.py	/^params = Params()$/;"	v
params	src/main.py	/^    params = Params()$/;"	v
params	src/pyo_main.py	/^    params = Params()$/;"	v
params	src/real_simulation.py	/^    params = Params()$/;"	v
params	src/simulation.py	/^    params = Params()$/;"	v
params_globalmap	src/animation.py	/^params_globalmap =  map_params()$/;"	v
params_globalmap	src/main.py	/^    params_globalmap =  map_params()$/;"	v
params_globalmap	src/pyo_main.py	/^    params_globalmap =  map_params()$/;"	v
params_globalmap	src/real_simulation.py	/^    params_globalmap =  map_params()$/;"	v
params_globalmap	src/simulation.py	/^    params_globalmap =  map_params()$/;"	v
params_localmap	src/animation.py	/^params_localmap =  map_params()$/;"	v
params_localmap	src/main.py	/^    params_localmap =  map_params()$/;"	v
params_localmap	src/pyo_main.py	/^    params_localmap =  map_params()$/;"	v
params_localmap	src/real_simulation.py	/^    params_localmap =  map_params()$/;"	v
params_localmap	src/simulation.py	/^    params_localmap =  map_params()$/;"	v
params_map	src/backup_animation.py	/^params_map =  map_params()$/;"	v
parent	src/utils/priority_queue.py	/^  def parent(self,child):$/;"	m	class:priority_queue
parser	src/main.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	src/pyo_main.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	src/real_simulation.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	src/simulation.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	src/test.py	/^    parser = argparse.ArgumentParser(description="Usage: main.py obs")$/;"	v
perform_search	src/utils/uniform_cost_search.py	/^    def perform_search(self, goalpos):$/;"	m	class:Search
performance_graphs	src/main.py	/^    performance_graphs = True  # include the velocity and acceleration performance of the vehicles$/;"	v
performance_graphs	src/pyo_main.py	/^    performance_graphs = True  # include the velocity and acceleration performance of the vehicles$/;"	v
performance_graphs	src/test.py	/^    performance_graphs = True  # include the velocity and acceleration performance of the vehicles$/;"	v
phi	src/original_trj.py	/^phi = np.array([m.phi[t]() for t in m.t])$/;"	v
phi_max	src/original_trj.py	/^phi_max = 1.0$/;"	v
pi_2_pi	src/motion_model.py	/^def pi_2_pi(angle):$/;"	f
planner	src/main.py	/^    planner = VerticalCellDecomposition(cspace)$/;"	v
planner	src/pyo_main.py	/^    planner = VerticalCellDecomposition(cspace)$/;"	v
planner	src/real_simulation.py	/^    planner = VerticalCellDecomposition(cspace)$/;"	v
planner	src/simulation.py	/^    planner = VerticalCellDecomposition(cspace)$/;"	v
planning	src/grid_based_sweep_coverage_path_planner.py	/^def planning(ox, oy, reso,$/;"	f
plot_arrow	src/model_predictive_trajectory_generator.py	/^def plot_arrow(x, y, yaw, length=1.0, width=0.5, fc="r", ec="k"):$/;"	f
plot_best_trj	src/real_simulation.py	/^def plot_best_trj(trj, ax=None):$/;"	f
plot_config_space	src/utils/configuration_space.py	/^    def plot_config_space(self,showPlot=True):$/;"	m	class:configuration_space
plot_global_trjs	src/real_simulation.py	/^def plot_global_trjs(trjs, ax=None):$/;"	f
plot_grid_map	src/grid_map_lib.py	/^    def plot_grid_map(self, ax=None):$/;"	m	class:GridMap
plot_map	src/animation.py	/^def plot_map(pos_x,pos_y,way_x, way_y, waytimes):$/;"	f
plot_map	src/backup_animation.py	/^def plot_map(pos_x,pos_y,way_x, way_y, waytimes):$/;"	f
plot_map	src/main.py	/^def plot_map(pos_x,pos_y,way_x, way_y, waytimes):$/;"	f
plot_map	src/pyo_main.py	/^def plot_map(pos_x,pos_y,way_x, way_y, waytimes):$/;"	f
plot_map	src/real_simulation.py	/^def plot_map(pos_x,pos_y,way_x, way_y, waytimes):$/;"	f
plot_map	src/simulation.py	/^def plot_map(pos_x,pos_y,way_x, way_y, waytimes):$/;"	f
plot_obstacles	src/animation.py	/^def plot_obstacles(obstacles):$/;"	f
plot_obstacles	src/backup_animation.py	/^def plot_obstacles(obstacles):$/;"	f
plot_obstacles	src/main.py	/^def plot_obstacles(obstacles):$/;"	f
plot_obstacles	src/pyo_main.py	/^def plot_obstacles(obstacles):$/;"	f
plot_obstacles	src/real_simulation.py	/^def plot_obstacles(obstacles, walls):$/;"	f
plot_obstacles	src/simulation.py	/^def plot_obstacles(obstacles, walls):$/;"	f
plot_polygon	src/utils/configuration_space.py	/^    def plot_polygon(self,coords,axes=None):$/;"	m	class:configuration_space
plot_regions	src/VCD.py	/^    def plot_regions(self, ax=None):$/;"	m	class:VerticalCellDecomposition
plot_robot	src/animation.py	/^def plot_robot(pose, params):$/;"	f
plot_robot	src/backup_animation.py	/^def plot_robot(pose, params):$/;"	f
plot_robot	src/main.py	/^def plot_robot(pose, params):$/;"	f
plot_robot	src/pyo_main.py	/^def plot_robot(pose, params):$/;"	f
plot_robot	src/real_simulation.py	/^def plot_robot(pose, params):$/;"	f
plot_robot	src/simulation.py	/^def plot_robot(pose, params):$/;"	f
plot_vcd	src/VCD.py	/^    def plot_vcd(self):$/;"	m	class:VerticalCellDecomposition
pmap_global	src/animation.py	/^        pmap_global = update_occ_grid_map(state, pmap_local,params_localmap, pmap_global,params_globalmap)$/;"	v
pmap_global	src/animation.py	/^pmap_global = initialize_global_occ_grid_map(params_globalmap)$/;"	v
pmap_global	src/backup_animation.py	/^        pmap_global = update_occ_grid_map(state, updated_grids,pmap_global,params_map)$/;"	v
pmap_global	src/backup_animation.py	/^pmap_global = initialize_global_occ_grid_map(params_map)$/;"	v
pmap_global	src/real_simulation.py	/^            pmap_global = update_occ_grid_map(state, pmap_local,params_localmap, pmap_global,params_globalmap)$/;"	v
pmap_global	src/real_simulation.py	/^    pmap_global = initialize_global_occ_grid_map(params_globalmap)$/;"	v
pmap_global	src/simulation.py	/^            pmap_global = update_occ_grid_map(state, pmap_local,params_localmap, pmap_global,params_globalmap)$/;"	v
pmap_global	src/simulation.py	/^    pmap_global = initialize_global_occ_grid_map(params_globalmap)$/;"	v
polygon_contains_point	src/raycasting_grid_map.py	/^def polygon_contains_point(point, obstacle):$/;"	f
polygon_contains_point	src/tools.py	/^def polygon_contains_point(point, polygon_vertices):$/;"	f
pop	src/utils/priority_queue.py	/^  def pop(self):$/;"	m	class:priority_queue
pos_x	src/animation.py	/^pos_x = np.asarray(df['x'][1:])             #robot pos_x$/;"	v
pos_x	src/animation.py	/^pos_x = pos_x.astype(np.float)$/;"	v
pos_x	src/backup_animation.py	/^pos_x = np.asarray(df['x'][1:])             #robot pos_x$/;"	v
pos_x	src/backup_animation.py	/^pos_x = pos_x.astype(np.float)$/;"	v
pos_x	src/dataplot.py	/^pos_x = np.asarray(df['x'][1:])             #robot pos_x$/;"	v
pos_x	src/dataplot.py	/^pos_x = pos_x.astype(np.float)$/;"	v
pos_x	src/main.py	/^        pos_x = np.asarray(df['x'][1:])             #robot pos_x$/;"	v
pos_x	src/main.py	/^        pos_x = pos_x.astype(np.float)$/;"	v
pos_x	src/pyo_main.py	/^        pos_x = np.asarray(df['x'][1:])             #robot pos_x$/;"	v
pos_x	src/pyo_main.py	/^        pos_x = pos_x.astype(np.float)$/;"	v
pos_x	src/simulation.py	/^        pos_x = np.asarray(df['x'][1:])             #robot pos_x$/;"	v
pos_x	src/simulation.py	/^        pos_x = pos_x.astype(np.float)$/;"	v
pos_y	src/animation.py	/^pos_y = np.asarray(df['y'][1:])             #robot pos_y$/;"	v
pos_y	src/animation.py	/^pos_y = pos_y.astype(np.float)$/;"	v
pos_y	src/backup_animation.py	/^pos_y = np.asarray(df['y'][1:])             #robot pos_y$/;"	v
pos_y	src/backup_animation.py	/^pos_y = pos_y.astype(np.float)$/;"	v
pos_y	src/dataplot.py	/^pos_y = np.asarray(df['y'][1:])             #robot pos_y$/;"	v
pos_y	src/dataplot.py	/^pos_y = pos_y.astype(np.float)$/;"	v
pos_y	src/main.py	/^        pos_y = np.asarray(df['y'][1:])             #robot pos_y$/;"	v
pos_y	src/main.py	/^        pos_y = pos_y.astype(np.float)$/;"	v
pos_y	src/pyo_main.py	/^        pos_y = np.asarray(df['y'][1:])             #robot pos_y$/;"	v
pos_y	src/pyo_main.py	/^        pos_y = pos_y.astype(np.float)$/;"	v
pos_y	src/simulation.py	/^        pos_y = np.asarray(df['y'][1:])             #robot pos_y$/;"	v
pos_y	src/simulation.py	/^        pos_y = pos_y.astype(np.float)$/;"	v
pq	src/utils/priority_queue.py	/^  pq = priority_queue()$/;"	v
precastDB	src/raycasting_grid_map.py	/^class precastDB:$/;"	c
precasting	src/raycasting_grid_map.py	/^def precasting(minx, miny, xw, yw, xyreso, yawreso,agent_x,agent_y):$/;"	f
print_region	src/VCD.py	/^    def print_region(self):$/;"	m	class:VerticalCellDecomposition
priority_queue	src/utils/priority_queue.py	/^class priority_queue:$/;"	c
random_sampling	src/real_simulation.py	/^def random_sampling(params, nums):$/;"	f
random_sampling	src/simulation.py	/^def random_sampling(params, nums):$/;"	f
read_inputfile	src/real_simulation.py	/^def read_inputfile(FILE_NAME="input2.txt"):$/;"	f
regex	src/animation.py	/^regex = re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+')                #set pattern in order to find integer in string$/;"	v
regex	src/backup_animation.py	/^regex = re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+')                #set pattern in order to find integer in string$/;"	v
regex	src/dataplot.py	/^regex = re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+')                #set pattern in order to find integer in string$/;"	v
regex	src/main.py	/^        regex = re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+')                #set pattern in order to find integer in string$/;"	v
regex	src/pyo_main.py	/^        regex = re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+')                #set pattern in order to find integer in string$/;"	v
regex	src/simulation.py	/^        regex = re.compile('[-+]?\\d*\\.\\d+|[-+]?\\d+')                #set pattern in order to find integer in string$/;"	v
region_disection	src/VCD.py	/^    def region_disection(self, goalpos=None):$/;"	m	class:VerticalCellDecomposition
remove	src/utils/priority_queue.py	/^  def remove(self,index):$/;"	m	class:priority_queue
reset_cspace	src/VCD.py	/^    def reset_cspace(self,cspace):$/;"	m	class:VerticalCellDecomposition
reset_environment	src/utils/configuration_space.py	/^    def reset_environment(self, boundaries, init_pos,goal_pos, obstacles):$/;"	m	class:configuration_space
reso	src/test.py	/^    reso = 2.0$/;"	v
rightChild	src/utils/priority_queue.py	/^  def rightChild(self,parent):$/;"	m	class:priority_queue
s	src/simulation.py	/^                s = np.arange(0, sp.s[-1], ds)$/;"	v
s_iter	src/simulation.py	/^                s_iter=0$/;"	v
sample_goals	src/real_simulation.py	/^            sample_goals = goal_sampling_VCD(waypoint_vcd, state[0],state[1], params_globalmap)$/;"	v
sample_goals	src/real_simulation.py	/^            sample_goals = random_sampling(params,6)$/;"	v
sample_goals	src/simulation.py	/^            sample_goals = random_sampling(params,7)$/;"	v
sample_goals2	src/real_simulation.py	/^            sample_goals2 = goal_sampling_VCD(waypoint_vcd, state[0],state[1], params_globalmap)$/;"	v
sample_gols_total	src/real_simulation.py	/^            sample_gols_total=[sample_goals,sample_goals2]$/;"	v
sample_states	src/state_lattice_planner.py	/^def sample_states(cur_states, angle_samples, a_min, a_max, d, p_max, p_min, nh):$/;"	f
save_lookup_table	src/lookuptable_generator.py	/^def save_lookup_table(fname, table):$/;"	f
scl	src/original_trj.py	/^scl=0.2$/;"	v
search	src/VCD.py	/^    def search(self,showPlot=False, goalpos=None):$/;"	m	class:VerticalCellDecomposition
search_free_grid_index_at_edge_y	src/grid_based_sweep_coverage_path_planner.py	/^def search_free_grid_index_at_edge_y(grid_map, from_upper=False):$/;"	f
search_nearest_one_from_lookuptable	src/lookuptable_generator.py	/^def search_nearest_one_from_lookuptable(tx, ty, tyaw, lookuptable):$/;"	f
search_nearest_one_from_lookuptable	src/state_lattice_planner.py	/^def search_nearest_one_from_lookuptable(tx, ty, tyaw, lookup_table):$/;"	f
search_start_grid	src/grid_based_sweep_coverage_path_planner.py	/^    def search_start_grid(self, grid_map):$/;"	m	class:SweepSearcher
selection_learning_param	src/model_predictive_trajectory_generator.py	/^def selection_learning_param(dp, p, k0, target):$/;"	f
set_value_from_polygon	src/grid_map_lib.py	/^    def set_value_from_polygon(self, pol_x, pol_y, val, inside=True):$/;"	m	class:GridMap
set_value_from_xy_index	src/grid_map_lib.py	/^    def set_value_from_xy_index(self, x_ind, y_ind, val):$/;"	m	class:GridMap
set_value_from_xy_pos	src/grid_map_lib.py	/^    def set_value_from_xy_pos(self, x_pos, y_pos, val):$/;"	m	class:GridMap
setup_grid_map	src/grid_based_sweep_coverage_path_planner.py	/^def setup_grid_map(ox, oy, reso, sweep_direction, offset_grid=5):$/;"	f
shape	src/main.py	/^        shape = ['o', '^']$/;"	v
shape	src/pyo_main.py	/^        shape = ['o', '^']$/;"	v
shape	src/test.py	/^            shape = ['o', '^']$/;"	v
show_animation	src/model_predictive_trajectory_generator.py	/^show_animation = False$/;"	v
show_animation	src/raycasting_grid_map.py	/^show_animation = True$/;"	v
show_animation	src/state_lattice_planner.py	/^show_animation = True$/;"	v
show_trajectory	src/model_predictive_trajectory_generator.py	/^def show_trajectory(target, xc, yc):$/;"	f
simple_motion	src/animation.py	/^def simple_motion(state, goal, params):$/;"	f
simple_motion	src/backup_animation.py	/^def simple_motion(state, goal, params):$/;"	f
simple_motion	src/main.py	/^def simple_motion(state, goal, params):$/;"	f
simple_motion	src/pyo_main.py	/^def simple_motion(state, goal, params):$/;"	f
simple_motion	src/real_simulation.py	/^def simple_motion(state, goal, params):$/;"	f
simple_motion	src/simulation.py	/^def simple_motion(state, goal, params):$/;"	f
simtime	src/animation.py	/^    simtime = simtime + dt$/;"	v
simtime	src/animation.py	/^simtime=0.0$/;"	v
simtime	src/backup_animation.py	/^    simtime = simtime + dt$/;"	v
simtime	src/backup_animation.py	/^simtime=0.0$/;"	v
simtime	src/real_simulation.py	/^        simtime = simtime + dt$/;"	v
simtime	src/real_simulation.py	/^    simtime=0.0$/;"	v
simtime	src/simulation.py	/^        simtime = simtime + dt$/;"	v
simtime	src/simulation.py	/^    simtime=0.0$/;"	v
smoothing_path	src/VCD.py	/^    def smoothing_path(self,final_path, final_path_idx):$/;"	m	class:VerticalCellDecomposition
sp_gtrjs	src/real_simulation.py	/^            sp_gtrjs = trjs_to_sample(gtrjs,axes[1,0])$/;"	v
state	src/animation.py	/^    state = simple_motion(state, goal, params)                        #dynamics$/;"	v
state	src/animation.py	/^state = np.array([pos_x[0],pos_y[0],np.pi\/2, 0.0])$/;"	v
state	src/backup_animation.py	/^    state = simple_motion(state, goal, params)$/;"	v
state	src/backup_animation.py	/^state = np.array([pos_x[0],pos_y[0],np.pi\/2, 0.0])$/;"	v
state	src/real_simulation.py	/^        state = simple_motion(state, goal, params)                          #dynamics$/;"	v
state	src/real_simulation.py	/^    state = np.array([init_pos[0],init_pos[1],0.0, 0.0])$/;"	v
state	src/simulation.py	/^        state = simple_motion(state, goal, params)                        #dynamics$/;"	v
state	src/simulation.py	/^    state = np.array([init_pos[0],init_pos[1],0.0, 0.0])$/;"	v
steps	src/main.py	/^        steps = int(T \/ dt)                             # number of steps$/;"	v
steps	src/pyo_main.py	/^        steps = int(T \/ dt)                             # number of steps$/;"	v
steps	src/test.py	/^    steps = int(T \/ dt)                             # number of steps$/;"	v
swap_moving_direction	src/grid_based_sweep_coverage_path_planner.py	/^    def swap_moving_direction(self):$/;"	m	class:SweepSearcher
sweep_path_search	src/grid_based_sweep_coverage_path_planner.py	/^def sweep_path_search(sweep_searcher, gmap, grid_search_animation=False):$/;"	f
t	src/main.py	/^    t = time.localtime()$/;"	v
t	src/original_trj.py	/^t = np.array([t for t in m.t])$/;"	v
t	src/pyo_main.py	/^    t = time.localtime()$/;"	v
t	src/test.py	/^    t = time.localtime()$/;"	v
t_current	src/animation.py	/^    t_current = time.time()$/;"	v
t_current	src/backup_animation.py	/^    t_current = time.time()$/;"	v
t_current	src/real_simulation.py	/^        t_current = time.time()$/;"	v
t_current	src/simulation.py	/^        t_current = time.time()$/;"	v
t_prev_goal	src/animation.py	/^        t_prev_goal = time.time()$/;"	v
t_prev_goal	src/animation.py	/^t_prev_goal = time.time()$/;"	v
t_prev_goal	src/backup_animation.py	/^        t_prev_goal = time.time()$/;"	v
t_prev_goal	src/backup_animation.py	/^t_prev_goal = time.time()$/;"	v
t_prev_goal	src/real_simulation.py	/^            t_prev_goal = time.time()$/;"	v
t_prev_goal	src/real_simulation.py	/^    t_prev_goal = time.time()$/;"	v
t_prev_goal	src/simulation.py	/^            t_prev_goal = time.time()$/;"	v
t_prev_goal	src/simulation.py	/^    t_prev_goal = time.time()$/;"	v
table_path	src/state_lattice_planner.py	/^table_path = ".\/lookuptables.csv"$/;"	v
tellme	src/tools.py	/^        def tellme(s):$/;"	f	function:define_polygon
test_1	tests/test_vehicle.py	/^    def test_1(self):$/;"	m	class:TestStringMethods
test_optimize_trajectory	src/model_predictive_trajectory_generator.py	/^def test_optimize_trajectory():$/;"	f
test_polygon_set	src/grid_map_lib.py	/^def test_polygon_set():$/;"	f
test_position_set	src/grid_map_lib.py	/^def test_position_set():$/;"	f
test_trajectory_generate	src/model_predictive_trajectory_generator.py	/^def test_trajectory_generate():$/;"	f
timeindex	src/animation.py	/^timeindex = "04171450"$/;"	v
timeindex	src/backup_animation.py	/^timeindex = "04171450"$/;"	v
timeindex	src/dataplot.py	/^timeindex = "04302233"$/;"	v
timeindex	src/main.py	/^        timeindex = "04171450"$/;"	v
timeindex	src/pyo_main.py	/^        timeindex = "04171450"$/;"	v
timeindex	src/simulation.py	/^        timeindex = "04171450"$/;"	v
timestamp	src/main.py	/^    timestamp =time.strftime('%m%d%H%M_', t)$/;"	v
timestamp	src/pyo_main.py	/^    timestamp =time.strftime('%m%d%H%M_', t)$/;"	v
timestamp	src/test.py	/^    timestamp =time.strftime('%m%d%H%M_', t)$/;"	v
tmp	src/dataplot.py	/^    tmp = Obstacle(nums[0], nums[1], nums[2], nums[3])          #xmin,ymin, $/;"	v
tmp	src/main.py	/^            tmp = Obstacle(ob[0], ob[1], ob[2], ob[3])  # local obstacle variable$/;"	v
tmp	src/pyo_main.py	/^            tmp = Obstacle(ob[0], ob[1], ob[2], ob[3])  # local obstacle variable$/;"	v
tmp	src/test.py	/^        tmp = Obstacle(ob[0], ob[1], ob[2], ob[3])  # local obstacle variable$/;"	v
top	src/utils/priority_queue.py	/^  def top(self):$/;"	m	class:priority_queue
total	src/main.py	/^                total = vehicles[veh].Tf  # Objective function without acceleration$/;"	v
total	src/main.py	/^    total = 0                                # total number of time steps between all the vehicles (minimize)$/;"	v
total	src/pyo_main.py	/^                total = vehicles[veh].Tf  # Objective function without acceleration$/;"	v
total	src/pyo_main.py	/^    total = 0                                # total number of time steps between all the vehicles (minimize)$/;"	v
total	src/test.py	/^                total = vehicles[veh].Tf  # Objective function without acceleration$/;"	v
total	src/test.py	/^    total = 0                                # total number of time steps between all the vehicles (minimize)$/;"	v
traj	src/animation.py	/^        traj = np.vstack([traj, state[:2]])$/;"	v
traj	src/animation.py	/^traj = state[:2]$/;"	v
traj	src/backup_animation.py	/^        traj = np.vstack([traj, state[:2]])$/;"	v
traj	src/backup_animation.py	/^traj = state[:2]$/;"	v
traj	src/real_simulation.py	/^            traj = np.vstack([traj, state[:2]])$/;"	v
traj	src/real_simulation.py	/^    traj = state[:2]$/;"	v
traj	src/simulation.py	/^            traj = np.vstack([traj, state[:2]])$/;"	v
traj	src/simulation.py	/^    traj = state[:2]$/;"	v
trajectories	src/animation.py	/^trajectories = [pos_x, pos_y, vel_x, vel_y, ]$/;"	v
trajectories	src/backup_animation.py	/^trajectories = [pos_x, pos_y, vel_x, vel_y, ]$/;"	v
trajectories	src/main.py	/^        trajectories = [pos_x, pos_y, vel_x, vel_y, ]$/;"	v
trajectories	src/pyo_main.py	/^        trajectories = [pos_x, pos_y, vel_x, vel_y, ]$/;"	v
trajectories	src/simulation.py	/^        trajectories = [pos_x, pos_y, vel_x, vel_y, ]$/;"	v
transpose	src/utils/graph_utils.py	/^def transpose(l1, l2): $/;"	f
trjs_candidate	src/real_simulation.py	/^            trjs_candidate =[]$/;"	v
trjs_to_sample	src/real_simulation.py	/^def trjs_to_sample(trjs, ax=None, num_points=60, showplot=True):$/;"	f
uniform_terminal_state_sampling_test1	src/state_lattice_planner.py	/^def uniform_terminal_state_sampling_test1(cur_states, ax=None):$/;"	f
uniform_terminal_state_sampling_test2	src/state_lattice_planner.py	/^def uniform_terminal_state_sampling_test2():$/;"	f
update	src/motion_model.py	/^def update(state, v, delta, dt,L):$/;"	f
update_occ_grid_map	src/animation.py	/^def update_occ_grid_map(state, local_map, params_local, global_map, params_global):$/;"	f
update_occ_grid_map	src/backup_animation.py	/^def update_occ_grid_map(state,observed_grids, previous_map, mapparams):$/;"	f
update_occ_grid_map	src/main.py	/^def update_occ_grid_map(state, local_map, params_local, global_map, params_global):$/;"	f
update_occ_grid_map	src/pyo_main.py	/^def update_occ_grid_map(state, local_map, params_local, global_map, params_global):$/;"	f
update_occ_grid_map	src/real_simulation.py	/^def update_occ_grid_map(state, local_map, params_local, global_map, params_global):$/;"	f
update_occ_grid_map	src/simulation.py	/^def update_occ_grid_map(state, local_map, params_local, global_map, params_global):$/;"	f
update_turning_window	src/grid_based_sweep_coverage_path_planner.py	/^    def update_turning_window(self):$/;"	m	class:SweepSearcher
v	src/motion_model.py	/^v = 2.5  # velocity [m\/s]$/;"	v
v	src/original_trj.py	/^v = np.array([m.v[t]() for t in m.t])$/;"	v
v_coords	src/main.py	/^            v_coords = []$/;"	v
v_coords	src/main.py	/^        v_coords = []$/;"	v
v_coords	src/pyo_main.py	/^            v_coords = []$/;"	v
v_coords	src/pyo_main.py	/^        v_coords = []$/;"	v
v_coords	src/test.py	/^            v_coords = []$/;"	v
v_coords	src/test.py	/^        v_coords = []$/;"	v
v_coords_x	src/main.py	/^            v_coords_x = []$/;"	v
v_coords_x	src/main.py	/^        v_coords_x = []$/;"	v
v_coords_x	src/pyo_main.py	/^            v_coords_x = []$/;"	v
v_coords_x	src/pyo_main.py	/^        v_coords_x = []$/;"	v
v_coords_x	src/test.py	/^            v_coords_x = []$/;"	v
v_coords_x	src/test.py	/^        v_coords_x = []$/;"	v
v_coords_y	src/main.py	/^            v_coords_y = []$/;"	v
v_coords_y	src/main.py	/^        v_coords_y = []$/;"	v
v_coords_y	src/pyo_main.py	/^            v_coords_y = []$/;"	v
v_coords_y	src/pyo_main.py	/^        v_coords_y = []$/;"	v
v_coords_y	src/test.py	/^            v_coords_y = []$/;"	v
v_coords_y	src/test.py	/^        v_coords_y = []$/;"	v
v_data	src/main.py	/^        v_data=np.zeros([z,2])$/;"	v
v_data	src/pyo_main.py	/^        v_data=np.zeros([z,2])$/;"	v
v_data	src/test.py	/^        v_data=np.zeros([z,2])$/;"	v
v_init	src/main.py	/^    v_init=0.0$/;"	v
v_init	src/pyo_main.py	/^    v_init=0.0$/;"	v
v_mag	src/dataplot.py	/^v_mag= []$/;"	v
v_max	src/animation.py	/^v_max=0.4$/;"	v
v_max	src/backup_animation.py	/^v_max=0.4$/;"	v
v_max	src/dataplot.py	/^v_max=0.45$/;"	v
v_max	src/main.py	/^    v_max = 0.75             # maximum velocity of the vehicle$/;"	v
v_max	src/original_trj.py	/^v_max  = 30$/;"	v
v_max	src/pyo_main.py	/^    v_max = 0.75             # maximum velocity of the vehicle$/;"	v
v_max	src/real_simulation.py	/^v_max=0.4$/;"	v
v_max	src/simulation.py	/^v_max=0.4$/;"	v
v_max	src/test.py	/^    v_max = 0.45              # maximum velocity of the vehicle$/;"	v
v_min	src/original_trj.py	/^v_min = -4$/;"	v
veh_coords	src/main.py	/^        veh_coords = [[4, 8, -3.5, 6]]    # array containing all vehicles in [x_0,y_0,x_fin,y_fin] format$/;"	v
veh_coords	src/pyo_main.py	/^        veh_coords = [[4, 8, -3.5, 6]]    # array containing all vehicles in [x_0,y_0,x_fin,y_fin] format$/;"	v
veh_coords	src/test.py	/^        veh_coords = [[5, 5, -3.5, 6]]    # array containing all vehicles in [x_0,y_0,x_fin,y_fin] format$/;"	v
veh_coords	src/test.py	/^    veh_coords = [[1, 1, 0, -2]]     # array containing all vehicles in [x_0,y_0,x_fin,y_fin] format$/;"	v
vehicle_mass	src/main.py	/^    vehicle_mass = 5        # mass of the vehicles$/;"	v
vehicle_mass	src/pyo_main.py	/^    vehicle_mass = 5        # mass of the vehicles$/;"	v
vehicle_mass	src/test.py	/^    vehicle_mass = 5           # mass of the vehicles$/;"	v
vehicles	src/main.py	/^    vehicles = []$/;"	v
vehicles	src/pyo_main.py	/^    vehicles = []$/;"	v
vehicles	src/test.py	/^    vehicles = []$/;"	v
vel_x	src/animation.py	/^vel_x = np.asarray(df['vx'][1:])             #robot pos_x$/;"	v
vel_x	src/animation.py	/^vel_x = vel_x.astype(np.float)$/;"	v
vel_x	src/backup_animation.py	/^vel_x = np.asarray(df['vx'][1:])             #robot pos_x$/;"	v
vel_x	src/backup_animation.py	/^vel_x = vel_x.astype(np.float)$/;"	v
vel_x	src/dataplot.py	/^vel_x = np.asarray(df['vx'][1:])             #robot pos_x$/;"	v
vel_x	src/dataplot.py	/^vel_x = vel_x.astype(np.float)$/;"	v
vel_x	src/main.py	/^        vel_x = np.asarray(df['vx'][1:])             #robot pos_x$/;"	v
vel_x	src/main.py	/^        vel_x = vel_x.astype(np.float)$/;"	v
vel_x	src/pyo_main.py	/^        vel_x = np.asarray(df['vx'][1:])             #robot pos_x$/;"	v
vel_x	src/pyo_main.py	/^        vel_x = vel_x.astype(np.float)$/;"	v
vel_x	src/simulation.py	/^        vel_x = np.asarray(df['vx'][1:])             #robot pos_x$/;"	v
vel_x	src/simulation.py	/^        vel_x = vel_x.astype(np.float)$/;"	v
vel_y	src/animation.py	/^vel_y = np.asarray(df['vy'][1:])             #robot pos_y$/;"	v
vel_y	src/animation.py	/^vel_y = vel_y.astype(np.float)$/;"	v
vel_y	src/backup_animation.py	/^vel_y = np.asarray(df['vy'][1:])             #robot pos_y$/;"	v
vel_y	src/backup_animation.py	/^vel_y = vel_y.astype(np.float)$/;"	v
vel_y	src/dataplot.py	/^vel_y = np.asarray(df['vy'][1:])             #robot pos_y$/;"	v
vel_y	src/dataplot.py	/^vel_y = vel_y.astype(np.float)$/;"	v
vel_y	src/main.py	/^        vel_y = np.asarray(df['vy'][1:])             #robot pos_y$/;"	v
vel_y	src/main.py	/^        vel_y = vel_y.astype(np.float)$/;"	v
vel_y	src/pyo_main.py	/^        vel_y = np.asarray(df['vy'][1:])             #robot pos_y$/;"	v
vel_y	src/pyo_main.py	/^        vel_y = vel_y.astype(np.float)$/;"	v
vel_y	src/simulation.py	/^        vel_y = np.asarray(df['vy'][1:])             #robot pos_y$/;"	v
vel_y	src/simulation.py	/^        vel_y = vel_y.astype(np.float)$/;"	v
vertical_lines	src/VCD.py	/^    def vertical_lines(self):$/;"	m	class:VerticalCellDecomposition
visualize	src/animation.py	/^def visualize(traj, pose, obstacles,params):$/;"	f
visualize	src/backup_animation.py	/^def visualize(traj, pose, obstacles,params):$/;"	f
visualize	src/main.py	/^def visualize(traj, pose, obstacles,params):$/;"	f
visualize	src/pyo_main.py	/^def visualize(traj, pose, obstacles,params):$/;"	f
visualize	src/real_simulation.py	/^def visualize(traj, pose, obstacles, walls, params):$/;"	f
visualize	src/simulation.py	/^def visualize(traj, pose, obstacles, walls, params):$/;"	f
vx_init	src/main.py	/^        vx_init = [0.0]   # initial x-component velocity$/;"	v
vx_init	src/main.py	/^    vx_init = [0]           # initial x-component velocity$/;"	v
vx_init	src/pyo_main.py	/^        vx_init = [0.0]   # initial x-component velocity$/;"	v
vx_init	src/pyo_main.py	/^    vx_init = [0]           # initial x-component velocity$/;"	v
vx_init	src/test.py	/^        vx_init = [0.0]   # initial x-component velocity$/;"	v
vx_init	src/test.py	/^        vx_init = [0]   # initial x-component velocity$/;"	v
vy_init	src/main.py	/^        vy_init = [0.0]    # initial y-component velocity$/;"	v
vy_init	src/main.py	/^    vy_init = [0]           # initial y-component velocity$/;"	v
vy_init	src/pyo_main.py	/^        vy_init = [0.0]    # initial y-component velocity$/;"	v
vy_init	src/pyo_main.py	/^    vy_init = [0]           # initial y-component velocity$/;"	v
vy_init	src/test.py	/^        vy_init = [-0.0]    # initial y-component velocity$/;"	v
vy_init	src/test.py	/^        vy_init = [0]   # initial y-component velocity$/;"	v
walls	src/simulation.py	/^    walls=[]$/;"	v
way_coords	src/animation.py	/^way_coords = np.asarray(waydf['coords'][1:])$/;"	v
way_coords	src/backup_animation.py	/^way_coords = np.asarray(waydf['coords'][1:])$/;"	v
way_coords	src/dataplot.py	/^way_coords = np.asarray(waydf['coords'][1:])$/;"	v
way_coords	src/main.py	/^        way_coords = np.asarray(waydf['coords'][1:])$/;"	v
way_coords	src/pyo_main.py	/^        way_coords = np.asarray(waydf['coords'][1:])$/;"	v
way_coords	src/simulation.py	/^        way_coords = np.asarray(waydf['coords'][1:])$/;"	v
way_x	src/animation.py	/^way_x=[]$/;"	v
way_x	src/backup_animation.py	/^way_x=[]$/;"	v
way_x	src/dataplot.py	/^way_x=[]$/;"	v
way_x	src/main.py	/^        way_x=[]$/;"	v
way_x	src/pyo_main.py	/^        way_x=[]$/;"	v
way_x	src/real_simulation.py	/^    way_x=[]$/;"	v
way_x	src/simulation.py	/^        way_x=[]$/;"	v
way_x	src/simulation.py	/^    way_x=[]$/;"	v
way_y	src/animation.py	/^way_y=[]$/;"	v
way_y	src/backup_animation.py	/^way_y=[]$/;"	v
way_y	src/dataplot.py	/^way_y=[]$/;"	v
way_y	src/main.py	/^        way_y=[]$/;"	v
way_y	src/pyo_main.py	/^        way_y=[]$/;"	v
way_y	src/real_simulation.py	/^    way_y=[]$/;"	v
way_y	src/simulation.py	/^        way_y=[]$/;"	v
way_y	src/simulation.py	/^    way_y=[]$/;"	v
waydf	src/animation.py	/^waydf = pd.read_csv(wayfile_name, delimiter=',', names = ['index', 'time', 'coords'])$/;"	v
waydf	src/backup_animation.py	/^waydf = pd.read_csv(wayfile_name, delimiter=',', names = ['index', 'time', 'coords'])$/;"	v
waydf	src/dataplot.py	/^waydf = pd.read_csv(wayfile_name, delimiter=',', names = ['index', 'time', 'coords'])$/;"	v
waydf	src/main.py	/^        waydf = pd.read_csv(wayfile_name, delimiter=',', names = ['index', 'time', 'coords'])$/;"	v
waydf	src/pyo_main.py	/^        waydf = pd.read_csv(wayfile_name, delimiter=',', names = ['index', 'time', 'coords'])$/;"	v
waydf	src/simulation.py	/^        waydf = pd.read_csv(wayfile_name, delimiter=',', names = ['index', 'time', 'coords'])$/;"	v
wayfile_name	src/animation.py	/^wayfile_name =dir_path + "\/results\/data\/waypoints_" +timeindex+"_.csv"$/;"	v
wayfile_name	src/backup_animation.py	/^wayfile_name =dir_path + "\/results\/data\/waypoints_" +timeindex+"_.csv"$/;"	v
wayfile_name	src/dataplot.py	/^wayfile_name =dir_path + "\/results\/data\/waypoints_" +timeindex+"_.csv"$/;"	v
wayfile_name	src/main.py	/^        wayfile_name =dir_path + "\/results\/data\/waypoints_" +timeindex+"_.csv"$/;"	v
wayfile_name	src/pyo_main.py	/^        wayfile_name =dir_path + "\/results\/data\/waypoints_" +timeindex+"_.csv"$/;"	v
wayfile_name	src/simulation.py	/^        wayfile_name =dir_path + "\/results\/data\/waypoints_" +timeindex+"_.csv"$/;"	v
waypoint_vcd	src/main.py	/^    waypoint_vcd = planner.generate_waypoint(params_localmap)$/;"	v
waypoint_vcd	src/pyo_main.py	/^    waypoint_vcd = planner.generate_waypoint(params_localmap)$/;"	v
waypoint_vcd	src/real_simulation.py	/^    waypoint_vcd = planner.generate_waypoint(params_localmap)$/;"	v
waypoint_vcd	src/simulation.py	/^    waypoint_vcd = planner.generate_waypoint(params_localmap)$/;"	v
waytime	src/animation.py	/^waytime= np.asarray(waydf['time'][1:])$/;"	v
waytime	src/backup_animation.py	/^waytime= np.asarray(waydf['time'][1:])$/;"	v
waytime	src/dataplot.py	/^waytime= np.asarray(waydf['time'][1:])$/;"	v
waytime	src/main.py	/^        waytime= np.asarray(waydf['time'][1:])$/;"	v
waytime	src/pyo_main.py	/^        waytime= np.asarray(waydf['time'][1:])$/;"	v
waytime	src/simulation.py	/^        waytime= np.asarray(waydf['time'][1:])$/;"	v
waytimes	src/animation.py	/^waytimes= waytime.astype(np.float)$/;"	v
waytimes	src/backup_animation.py	/^waytimes= waytime.astype(np.float)$/;"	v
waytimes	src/dataplot.py	/^waytimes= waytime.astype(np.float)$/;"	v
waytimes	src/main.py	/^        waytimes= waytime.astype(np.float)$/;"	v
waytimes	src/pyo_main.py	/^        waytimes= waytime.astype(np.float)$/;"	v
waytimes	src/simulation.py	/^        waytimes= waytime.astype(np.float)$/;"	v
wp	src/main.py	/^        wp = True           # switch for use of waypoints. True: waypoints can be used. False: function deactivated$/;"	v
wp	src/pyo_main.py	/^        wp = True           # switch for use of waypoints. True: waypoints can be used. False: function deactivated$/;"	v
wp	src/test.py	/^        wp = True           # switch for use of waypoints. True: waypoints can be used. False: function deactivated$/;"	v
wp	src/test.py	/^        wp = True       # switch for use of waypoints. True: waypoints can be used. False: function deactivated$/;"	v
wp_coords	src/test.py	/^        wp_coords = [[[0, -2],[3,3], [-3, 4]]]  # array containing all waypoint in [x_wp,y_wp] format$/;"	v
wp_coords	src/test.py	/^        wp_coords = [[[1, 3], [3,3],[-3,3],[0,-2], [3,1], [3,-1],[1,-3],[3,-3], [-3, -3]]]  # array containing all waypoint in [x_wp,y_wp] format$/;"	v
wp_coords	src/test.py	/^    wp_coords=[[]]$/;"	v
wp_times	src/main.py	/^        wp_times= dict(sorted(wp_times.items()))$/;"	v
wp_times	src/main.py	/^        wp_times={}$/;"	v
wp_times	src/pyo_main.py	/^        wp_times= dict(sorted(wp_times.items()))$/;"	v
wp_times	src/pyo_main.py	/^        wp_times={}$/;"	v
wp_times	src/test.py	/^        wp_times= dict(sorted(wp_times.items()))$/;"	v
wp_times	src/test.py	/^        wp_times={}$/;"	v
wp_vcds	src/main.py	/^        wp_vcds = planner.generate_waypoint(params_localmap)$/;"	v
wp_vcds	src/pyo_main.py	/^        wp_vcds = planner.generate_waypoint(params_localmap)$/;"	v
wpdata	src/main.py	/^        wpdata=[]$/;"	v
wpdata	src/pyo_main.py	/^        wpdata=[]$/;"	v
wpdata	src/test.py	/^        wpdata=[]$/;"	v
x	src/original_trj.py	/^x = np.array([m.x[t]() for t in m.t])$/;"	v
y	src/original_trj.py	/^y = np.array([m.y[t]() for t in m.t])$/;"	v
z	src/main.py	/^        z = 0$/;"	v
z	src/main.py	/^        z=list(wp_times.keys())[-1]           #printing the final time$/;"	v
z	src/main.py	/^        z=z+1$/;"	v
z	src/pyo_main.py	/^        z = 0$/;"	v
z	src/pyo_main.py	/^        z=list(wp_times.keys())[-1]           #printing the final time$/;"	v
z	src/pyo_main.py	/^        z=z+1$/;"	v
z	src/test.py	/^        z = 0$/;"	v
z	src/test.py	/^        z=list(wp_times.keys())[-1]           #printing the final time$/;"	v
z	src/test.py	/^        z=z+1$/;"	v
